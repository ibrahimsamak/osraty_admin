{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/dialog/dialog.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/dialog/dialog.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Inject, Injectable, Injector, TemplateRef } from '@angular/core';\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NbComponentPortal, NbOverlayService, NbPortalInjector, NbPositionBuilderService, NbTemplatePortal, } from '../cdk';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NB_DIALOG_CONFIG, NbDialogConfig } from './dialog-config';\nimport { NbDialogRef } from './dialog-ref';\nimport { NbDialogContainerComponent } from './dialog-container';\n/**\n * The `NbDialogService` helps to open dialogs.\n *\n * @stacked-example(Showcase, dialog/dialog-showcase.component)\n *\n * A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.\n * `open` method will return `NbDialogRef` that can be used for the further manipulations.\n *\n * ### Installation\n *\n * Import `NbDialogModule.forRoot()` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDialogModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * If you are using it in a lazy loaded module than you have to install it with `NbDialogModule.forChild()`:\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDialogModule.forChild(config),\n *   ],\n * })\n * export class LazyLoadedModule { }\n * ```\n *\n * ### Usage\n *\n * ```ts\n * const dialogRef = this.dialogService.open(MyDialogComponent, { ... });\n * ```\n *\n * `NbDialogRef` gives capability access reference to the rendered dialog component,\n * destroy dialog and some other options described below.\n *\n * Also, you can inject `NbDialogRef` in dialog component.\n *\n * ```ts\n * this.dialogService.open(MyDialogComponent, { ... });\n *\n * // my-dialog.component.ts\n * constructor(protected dialogRef: NbDialogRef) {\n * }\n *\n * close() {\n *   this.dialogRef.close();\n * }\n * ```\n *\n * Instead of component you can create dialog from TemplateRef:\n *\n * @stacked-example(Template ref, dialog/dialog-template.component)\n *\n * The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`\n * stream of `NbDialogRef`.\n *\n * @stacked-example(Result, dialog/dialog-result.component)\n *\n * ### Configuration\n *\n * As we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.\n * Also, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.\n *\n * This config may contain the following:\n *\n * `context` - both, template and component may receive data through `config.context` property.\n * For components, this data will be assigned through inputs.\n * For templates, you can access it inside template as $implicit.\n *\n * ```ts\n * this.dialogService.open(template, { context: 'pass data in template' });\n * ```\n *\n * ```html\n * <ng-template let-some-additional-data>\n *   {{ some-additional-data }}\n * <ng-template/>\n * ```\n *\n * `hasBackdrop` - determines is service have to render backdrop under the dialog.\n * Default is true.\n * @stacked-example(Backdrop, dialog/dialog-has-backdrop.component)\n *\n * `closeOnBackdropClick` - close dialog on backdrop click if true.\n * Default is true.\n * @stacked-example(Backdrop click, dialog/dialog-backdrop-click.component)\n *\n * `closeOnEsc` - close dialog on escape button on the keyboard.\n * Default is true.\n * @stacked-example(Escape hit, dialog/dialog-esc.component)\n *\n * `hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.\n * Default is false.\n * Please, open dialogs in the separate window and try to scroll.\n * @stacked-example(Scroll, dialog/dialog-scroll.component)\n *\n * `autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on\n * trigger elements and opening multiple dialogs.\n * Default is true.\n *\n * As you can see, if you open dialog with auto focus dialog will focus first focusable element\n * or just blur previously focused automatically.\n * Otherwise, without auto focus, the focus will stay on the previously focused element.\n * Please, open dialogs in the separate window and try to click on the button without focus\n * and then hit space any times. Multiple same dialogs will be opened.\n * @stacked-example(Auto focus, dialog/dialog-auto-focus.component)\n * */\nvar NbDialogService = /*@__PURE__*/ (function () {\n    function NbDialogService(document, globalConfig, positionBuilder, overlay, injector, cfr) {\n        this.document = document;\n        this.globalConfig = globalConfig;\n        this.positionBuilder = positionBuilder;\n        this.overlay = overlay;\n        this.injector = injector;\n        this.cfr = cfr;\n    }\n    /**\n     * Opens new instance of the dialog, may receive optional config.\n     * */\n    /**\n       * Opens new instance of the dialog, may receive optional config.\n       * */\n    NbDialogService.prototype.open = /**\n       * Opens new instance of the dialog, may receive optional config.\n       * */\n        function (content, userConfig) {\n            if (userConfig === void 0) {\n                userConfig = {};\n            }\n            var config = new NbDialogConfig(__assign({}, this.globalConfig, userConfig));\n            var overlayRef = this.createOverlay(config);\n            var dialogRef = new NbDialogRef(overlayRef);\n            var container = this.createContainer(config, overlayRef);\n            this.createContent(config, content, container, dialogRef);\n            this.registerCloseListeners(config, overlayRef, dialogRef);\n            return dialogRef;\n        };\n    NbDialogService.prototype.createOverlay = function (config) {\n        var positionStrategy = this.createPositionStrategy();\n        var scrollStrategy = this.createScrollStrategy(config.hasScroll);\n        return this.overlay.create({\n            positionStrategy: positionStrategy,\n            scrollStrategy: scrollStrategy,\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n        });\n    };\n    NbDialogService.prototype.createPositionStrategy = function () {\n        return this.positionBuilder\n            .global()\n            .centerVertically()\n            .centerHorizontally();\n    };\n    NbDialogService.prototype.createScrollStrategy = function (hasScroll) {\n        if (hasScroll) {\n            return this.overlay.scrollStrategies.noop();\n        }\n        else {\n            return this.overlay.scrollStrategies.block();\n        }\n    };\n    NbDialogService.prototype.createContainer = function (config, overlayRef) {\n        var injector = new NbPortalInjector(this.createInjector(config), new WeakMap([[NbDialogConfig, config]]));\n        var containerPortal = new NbComponentPortal(NbDialogContainerComponent, null, injector, this.cfr);\n        var containerRef = overlayRef.attach(containerPortal);\n        return containerRef.instance;\n    };\n    NbDialogService.prototype.createContent = function (config, content, container, dialogRef) {\n        if (content instanceof TemplateRef) {\n            var portal = this.createTemplatePortal(config, content, dialogRef);\n            container.attachTemplatePortal(portal);\n        }\n        else {\n            var portal = this.createComponentPortal(config, content, dialogRef);\n            dialogRef.componentRef = container.attachComponentPortal(portal);\n            if (config.context) {\n                Object.assign(dialogRef.componentRef.instance, __assign({}, config.context));\n            }\n        }\n    };\n    NbDialogService.prototype.createTemplatePortal = function (config, content, dialogRef) {\n        return new NbTemplatePortal(content, null, { $implicit: config.context, dialogRef: dialogRef });\n    };\n    /**\n     * We're creating portal with custom injector provided through config or using global injector.\n     * This approach provides us capability inject `NbDialogRef` in dialog component.\n     * */\n    /**\n       * We're creating portal with custom injector provided through config or using global injector.\n       * This approach provides us capability inject `NbDialogRef` in dialog component.\n       * */\n    NbDialogService.prototype.createComponentPortal = /**\n       * We're creating portal with custom injector provided through config or using global injector.\n       * This approach provides us capability inject `NbDialogRef` in dialog component.\n       * */\n        function (config, content, dialogRef) {\n            var injector = this.createInjector(config);\n            var portalInjector = new NbPortalInjector(injector, new WeakMap([[NbDialogRef, dialogRef]]));\n            return new NbComponentPortal(content, config.viewContainerRef, portalInjector);\n        };\n    NbDialogService.prototype.createInjector = function (config) {\n        return config.viewContainerRef && config.viewContainerRef.injector || this.injector;\n    };\n    NbDialogService.prototype.registerCloseListeners = function (config, overlayRef, dialogRef) {\n        if (config.closeOnBackdropClick) {\n            overlayRef.backdropClick().subscribe(function () { return dialogRef.close(); });\n        }\n        if (config.closeOnEsc) {\n            observableFromEvent(this.document, 'keyup')\n                .pipe(filter(function (event) { return event.keyCode === 27; }))\n                .subscribe(function () { return dialogRef.close(); });\n        }\n    };\n    return NbDialogService;\n}());\nexport { NbDialogService };\n//# sourceMappingURL=dialog.service.js.map\n",null]}