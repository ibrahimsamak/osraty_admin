{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/cdk/overlay/mapping.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/cdk/overlay/mapping.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ApplicationRef, ComponentFactoryResolver, Directive, Inject, Injectable, Injector, NgModule, NgZone, } from '@angular/core';\nimport { CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortalOutlet, PortalInjector, PortalModule, TemplatePortal, } from '@angular/cdk/portal';\nimport { FlexibleConnectedPositionStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayPositionBuilder, OverlayRef, ScrollStrategyOptions, } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { NB_DOCUMENT } from '../../../theme.options';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nvar NbPortalDirective = /*@__PURE__*/ (function (_super) {\n    __extends(NbPortalDirective, _super);\n    function NbPortalDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbPortalDirective;\n}(CdkPortal));\nexport { NbPortalDirective };\nvar NbPortalOutletDirective = /*@__PURE__*/ (function (_super) {\n    __extends(NbPortalOutletDirective, _super);\n    function NbPortalOutletDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbPortalOutletDirective;\n}(CdkPortalOutlet));\nexport { NbPortalOutletDirective };\nvar NbComponentPortal = /*@__PURE__*/ (function (_super) {\n    __extends(NbComponentPortal, _super);\n    function NbComponentPortal(component, vcr, injector, cfr) {\n        var _this = _super.call(this, component, vcr, injector) || this;\n        _this.cfr = cfr;\n        return _this;\n    }\n    return NbComponentPortal;\n}(ComponentPortal));\nexport { NbComponentPortal };\n/**\n * TODO remove after @angular/cdk@7.0.0 relased\n * */\nvar /**\n * TODO remove after @angular/cdk@7.0.0 relased\n * */ NbDomPortalOutlet = /*@__PURE__*/ (function (_super) {\n    __extends(NbDomPortalOutlet, _super);\n    function NbDomPortalOutlet(/** Element into which the content is projected. */ outletElement, componentFactoryResolver, appRef, defaultInjector) {\n        var _this = _super.call(this, outletElement, componentFactoryResolver, appRef, defaultInjector) || this;\n        _this.outletElement = outletElement;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        _this.appRef = appRef;\n        _this.defaultInjector = defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n       * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n       * @param portal Portal to be attached\n       * @returns Reference to the created component.\n       */\n    NbDomPortalOutlet.prototype.attachComponentPortal = /**\n       * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n       * @param portal Portal to be attached\n       * @returns Reference to the created component.\n       */\n        function (portal) {\n            var _this = this;\n            var resolver = portal.cfr || this.componentFactoryResolver;\n            var componentFactory = resolver.resolveComponentFactory(portal.component);\n            var componentRef;\n            // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n            // for the component (in terms of Angular's component tree, not rendering).\n            // When the ViewContainerRef is missing, we use the factory to create the component directly\n            // and then manually attach the view to the application.\n            if (portal.viewContainerRef) {\n                componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n                this.setDisposeFn(function () { return componentRef.destroy(); });\n            }\n            else {\n                componentRef = componentFactory.create(portal.injector || this.defaultInjector);\n                this.appRef.attachView(componentRef.hostView);\n                this.setDisposeFn(function () {\n                    _this.appRef.detachView(componentRef.hostView);\n                    componentRef.destroy();\n                });\n            }\n            // At this point the component has been instantiated, so we move it to the location in the DOM\n            // where we want it to be rendered.\n            this.outletElement.appendChild(this.getComponentRootNode(componentRef));\n            return componentRef;\n        };\n    /** Gets the root HTMLElement for an instantiated component. */\n    /** Gets the root HTMLElement for an instantiated component. */\n    NbDomPortalOutlet.prototype.getComponentRootNode = /** Gets the root HTMLElement for an instantiated component. */\n        function (componentRef) {\n            return componentRef.hostView.rootNodes[0];\n        };\n    return NbDomPortalOutlet;\n}(DomPortalOutlet));\n/**\n * TODO remove after @angular/cdk@7.0.0 relased\n * */\nexport { NbDomPortalOutlet };\nvar NbOverlay = /*@__PURE__*/ (function (_super) {\n    __extends(NbOverlay, _super);\n    function NbOverlay(/** Scrolling strategies that can be used when creating an overlay. */ scrollStrategies, overlayContainer, componentFactoryResolver, positionBuilder, keyboardDispatcher, injector, ngZone, document, directionality) {\n        var _this = _super.call(this, scrollStrategies, overlayContainer, componentFactoryResolver, positionBuilder, keyboardDispatcher, injector, ngZone, document, directionality) || this;\n        _this.scrollStrategies = scrollStrategies;\n        _this.overlayContainer = overlayContainer;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        _this.positionBuilder = positionBuilder;\n        _this.keyboardDispatcher = keyboardDispatcher;\n        _this.injector = injector;\n        _this.ngZone = ngZone;\n        _this.document = document;\n        _this.directionality = directionality;\n        return _this;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    /**\n       * Creates an overlay.\n       * @param config Configuration applied to the overlay.\n       * @returns Reference to the created overlay.\n       */\n    NbOverlay.prototype.create = /**\n       * Creates an overlay.\n       * @param config Configuration applied to the overlay.\n       * @returns Reference to the created overlay.\n       */\n        function (config) {\n            var host = this.createHostElement();\n            var pane = this.createPaneElement(host);\n            var portalOutlet = this.createPortalOutlet(pane);\n            var overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this.directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this.ngZone, this.keyboardDispatcher, this.document);\n        };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    /**\n       * Creates the DOM element for an overlay and appends it to the overlay container.\n       * @returns Newly-created pane element\n       */\n    NbOverlay.prototype.createPaneElement = /**\n       * Creates the DOM element for an overlay and appends it to the overlay container.\n       * @returns Newly-created pane element\n       */\n        function (host) {\n            var pane = this.document.createElement('div');\n            pane.id = \"cdk-overlay-\" + NbOverlay.nextUniqueId++;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    /**\n       * Creates the host element that wraps around an overlay\n       * and can be used for advanced positioning.\n       * @returns Newly-create host element.\n       */\n    NbOverlay.prototype.createHostElement = /**\n       * Creates the host element that wraps around an overlay\n       * and can be used for advanced positioning.\n       * @returns Newly-create host element.\n       */\n        function () {\n            var host = this.document.createElement('div');\n            this.overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    /**\n       * Create a DomPortalOutlet into which the overlay content can be loaded.\n       * @param pane The DOM element to turn into a portal outlet.\n       * @returns A portal outlet for the given DOM element.\n       */\n    NbOverlay.prototype.createPortalOutlet = /**\n       * Create a DomPortalOutlet into which the overlay content can be loaded.\n       * @param pane The DOM element to turn into a portal outlet.\n       * @returns A portal outlet for the given DOM element.\n       */\n        function (pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this.appRef) {\n                this.appRef = this.injector.get(ApplicationRef);\n            }\n            return new NbDomPortalOutlet(pane, this.componentFactoryResolver, this.appRef, this.injector);\n        };\n    NbOverlay.nextUniqueId = 0;\n    return NbOverlay;\n}(Overlay));\nexport { NbOverlay };\nvar NbPlatform = /*@__PURE__*/ (function (_super) {\n    __extends(NbPlatform, _super);\n    function NbPlatform() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbPlatform;\n}(Platform));\nexport { NbPlatform };\nvar NbOverlayPositionBuilder = /*@__PURE__*/ (function (_super) {\n    __extends(NbOverlayPositionBuilder, _super);\n    function NbOverlayPositionBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbOverlayPositionBuilder;\n}(OverlayPositionBuilder));\nexport { NbOverlayPositionBuilder };\nvar NbTemplatePortal = /*@__PURE__*/ (function (_super) {\n    __extends(NbTemplatePortal, _super);\n    function NbTemplatePortal(template, viewContainerRef, context) {\n        return _super.call(this, template, viewContainerRef, context) || this;\n    }\n    return NbTemplatePortal;\n}(TemplatePortal));\nexport { NbTemplatePortal };\nvar NbOverlayContainer = /*@__PURE__*/ (function (_super) {\n    __extends(NbOverlayContainer, _super);\n    function NbOverlayContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NbOverlayContainer.ngInjectableDef = i0.defineInjectable({ factory: function NbOverlayContainer_Factory() { return new NbOverlayContainer(i0.inject(i1.DOCUMENT)); }, token: NbOverlayContainer, providedIn: \"root\" });\n    return NbOverlayContainer;\n}(OverlayContainer));\nexport { NbOverlayContainer };\nvar NbFlexibleConnectedPositionStrategy = /*@__PURE__*/ (function (_super) {\n    __extends(NbFlexibleConnectedPositionStrategy, _super);\n    function NbFlexibleConnectedPositionStrategy() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbFlexibleConnectedPositionStrategy;\n}(FlexibleConnectedPositionStrategy));\nexport { NbFlexibleConnectedPositionStrategy };\nvar NbPortalInjector = /*@__PURE__*/ (function (_super) {\n    __extends(NbPortalInjector, _super);\n    function NbPortalInjector() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NbPortalInjector;\n}(PortalInjector));\nexport { NbPortalInjector };\nvar CDK_MODULES = [OverlayModule, PortalModule];\n/**\n * This module helps us to keep all angular/cdk deps inside our cdk module via providing aliases.\n * Approach will help us move cdk in separate npm package and refactor nebular/theme code.\n * */\nvar NbCdkMappingModule = /*@__PURE__*/ (function () {\n    function NbCdkMappingModule() {\n    }\n    NbCdkMappingModule.forRoot = function () {\n        return {\n            ngModule: NbCdkMappingModule,\n            providers: [\n                NbOverlay,\n                NbPlatform,\n                NbOverlayPositionBuilder,\n            ],\n        };\n    };\n    return NbCdkMappingModule;\n}());\nexport { NbCdkMappingModule };\n//# sourceMappingURL=mapping.js.map\n",null]}