{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/auth.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/auth.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable } from '@angular/core';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport { NB_AUTH_STRATEGIES } from '../auth.options';\nimport { NbTokenService } from './token/token.service';\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Strategy.\n */\nvar NbAuthService = /*@__PURE__*/ (function () {\n    function NbAuthService(tokenService, strategies) {\n        this.tokenService = tokenService;\n        this.strategies = strategies;\n    }\n    /**\n     * Retrieves current authenticated token stored\n     * @returns {Observable<any>}\n     */\n    /**\n       * Retrieves current authenticated token stored\n       * @returns {Observable<any>}\n       */\n    NbAuthService.prototype.getToken = /**\n       * Retrieves current authenticated token stored\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.tokenService.get();\n        };\n    /**\n     * Returns true if auth token is present in the token storage\n     * @returns {Observable<boolean>}\n     */\n    /**\n       * Returns true if auth token is present in the token storage\n       * @returns {Observable<boolean>}\n       */\n    NbAuthService.prototype.isAuthenticated = /**\n       * Returns true if auth token is present in the token storage\n       * @returns {Observable<boolean>}\n       */\n        function () {\n            return this.getToken()\n                .pipe(map(function (token) { return token.isValid(); }));\n        };\n    /**\n     * Returns true if valid auth token is present in the token storage.\n     * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n     * @returns {Observable<boolean>}\n     */\n    /**\n       * Returns true if valid auth token is present in the token storage.\n       * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n       * @returns {Observable<boolean>}\n       */\n    NbAuthService.prototype.isAuthenticatedOrRefresh = /**\n       * Returns true if valid auth token is present in the token storage.\n       * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n       * @returns {Observable<boolean>}\n       */\n        function () {\n            var _this = this;\n            return this.getToken()\n                .pipe(switchMap(function (token) {\n                if (token.getValue() && !token.isValid()) {\n                    return _this.refreshToken(token.getOwnerStrategyName(), token)\n                        .pipe(switchMap(function (res) {\n                        if (res.isSuccess()) {\n                            return _this.isAuthenticated();\n                        }\n                        else {\n                            return observableOf(false);\n                        }\n                    }));\n                }\n                else {\n                    return observableOf(token.isValid());\n                }\n            }));\n        };\n    /**\n     * Returns tokens stream\n     * @returns {Observable<NbAuthSimpleToken>}\n     */\n    /**\n       * Returns tokens stream\n       * @returns {Observable<NbAuthSimpleToken>}\n       */\n    NbAuthService.prototype.onTokenChange = /**\n       * Returns tokens stream\n       * @returns {Observable<NbAuthSimpleToken>}\n       */\n        function () {\n            return this.tokenService.tokenChange();\n        };\n    /**\n     * Returns authentication status stream\n     * @returns {Observable<boolean>}\n     */\n    /**\n       * Returns authentication status stream\n       * @returns {Observable<boolean>}\n       */\n    NbAuthService.prototype.onAuthenticationChange = /**\n       * Returns authentication status stream\n       * @returns {Observable<boolean>}\n       */\n        function () {\n            return this.onTokenChange()\n                .pipe(map(function (token) { return token.isValid(); }));\n        };\n    /**\n     * Authenticates with the selected strategy\n     * Stores received token in the token storage\n     *\n     * Example:\n     * authenticate('email', {email: 'email@example.com', password: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Authenticates with the selected strategy\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.authenticate = /**\n       * Authenticates with the selected strategy\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName, data) {\n            var _this = this;\n            return this.getStrategy(strategyName).authenticate(data)\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Registers with the selected strategy\n     * Stores received token in the token storage\n     *\n     * Example:\n     * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Registers with the selected strategy\n       * Stores received token in the token storage\n       *\n       * Example:\n       * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.register = /**\n       * Registers with the selected strategy\n       * Stores received token in the token storage\n       *\n       * Example:\n       * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName, data) {\n            var _this = this;\n            return this.getStrategy(strategyName).register(data)\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Sign outs with the selected strategy\n     * Removes token from the token storage\n     *\n     * Example:\n     * logout('email')\n     *\n     * @param strategyName\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sign outs with the selected strategy\n       * Removes token from the token storage\n       *\n       * Example:\n       * logout('email')\n       *\n       * @param strategyName\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.logout = /**\n       * Sign outs with the selected strategy\n       * Removes token from the token storage\n       *\n       * Example:\n       * logout('email')\n       *\n       * @param strategyName\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName) {\n            var _this = this;\n            return this.getStrategy(strategyName).logout()\n                .pipe(switchMap(function (result) {\n                if (result.isSuccess()) {\n                    _this.tokenService.clear()\n                        .pipe(map(function () { return result; }));\n                }\n                return observableOf(result);\n            }));\n        };\n    /**\n     * Sends forgot password request to the selected strategy\n     *\n     * Example:\n     * requestPassword('email', {email: 'email@example.com'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sends forgot password request to the selected strategy\n       *\n       * Example:\n       * requestPassword('email', {email: 'email@example.com'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.requestPassword = /**\n       * Sends forgot password request to the selected strategy\n       *\n       * Example:\n       * requestPassword('email', {email: 'email@example.com'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName, data) {\n            return this.getStrategy(strategyName).requestPassword(data);\n        };\n    /**\n     * Tries to reset password with the selected strategy\n     *\n     * Example:\n     * resetPassword('email', {newPassword: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Tries to reset password with the selected strategy\n       *\n       * Example:\n       * resetPassword('email', {newPassword: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.resetPassword = /**\n       * Tries to reset password with the selected strategy\n       *\n       * Example:\n       * resetPassword('email', {newPassword: 'test'})\n       *\n       * @param strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName, data) {\n            return this.getStrategy(strategyName).resetPassword(data);\n        };\n    /**\n     * Sends a refresh token request\n     * Stores received token in the token storage\n     *\n     * Example:\n     * refreshToken('email', {token: token})\n     *\n     * @param {string} strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sends a refresh token request\n       * Stores received token in the token storage\n       *\n       * Example:\n       * refreshToken('email', {token: token})\n       *\n       * @param {string} strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.refreshToken = /**\n       * Sends a refresh token request\n       * Stores received token in the token storage\n       *\n       * Example:\n       * refreshToken('email', {token: token})\n       *\n       * @param {string} strategyName\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (strategyName, data) {\n            var _this = this;\n            return this.getStrategy(strategyName).refreshToken(data)\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Get registered strategy by name\n     *\n     * Example:\n     * getStrategy('email')\n     *\n     * @param {string} provider\n     * @returns {NbAbstractAuthProvider}\n     */\n    /**\n       * Get registered strategy by name\n       *\n       * Example:\n       * getStrategy('email')\n       *\n       * @param {string} provider\n       * @returns {NbAbstractAuthProvider}\n       */\n    NbAuthService.prototype.getStrategy = /**\n       * Get registered strategy by name\n       *\n       * Example:\n       * getStrategy('email')\n       *\n       * @param {string} provider\n       * @returns {NbAbstractAuthProvider}\n       */\n        function (strategyName) {\n            var found = this.strategies.find(function (strategy) { return strategy.getName() === strategyName; });\n            if (!found) {\n                throw new TypeError(\"There is no Auth Strategy registered under '\" + strategyName + \"' name\");\n            }\n            return found;\n        };\n    NbAuthService.prototype.processResultToken = function (result) {\n        if (result.isSuccess() && result.getToken()) {\n            return this.tokenService.set(result.getToken())\n                .pipe(map(function (token) {\n                return result;\n            }));\n        }\n        return observableOf(result);\n    };\n    return NbAuthService;\n}());\nexport { NbAuthService };\n//# sourceMappingURL=auth.service.js.map\n",null]}