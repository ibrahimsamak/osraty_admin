{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/scroll.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/scroll.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n/**\n * Layout scroll service. Provides information about current scroll position,\n * as well as methods to update position of the scroll.\n *\n * The reason we added this service is that in Nebular there are two scroll modes:\n * - the default mode when scroll is on body\n * - and the `withScroll` mode, when scroll is removed from the body and moved to an element inside of the\n * `nb-layout` component\n */\nvar NbLayoutScrollService = /*@__PURE__*/ (function () {\n    function NbLayoutScrollService() {\n        this.scrollPositionReq$ = new Subject();\n        this.manualScroll$ = new Subject();\n        this.scroll$ = new Subject();\n    }\n    /**\n     * Returns scroll position\n     *\n     * @returns {Observable<NbScrollPosition>}\n     */\n    /**\n       * Returns scroll position\n       *\n       * @returns {Observable<NbScrollPosition>}\n       */\n    NbLayoutScrollService.prototype.getPosition = /**\n       * Returns scroll position\n       *\n       * @returns {Observable<NbScrollPosition>}\n       */\n        function () {\n            var _this = this;\n            return Observable.create(function (observer) {\n                var listener = new Subject();\n                listener.subscribe(observer);\n                _this.scrollPositionReq$.next({ listener: listener });\n                return function () { return listener.complete(); };\n            });\n        };\n    /**\n     * Sets scroll position\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n    /**\n       * Sets scroll position\n       *\n       * @param {number} x\n       * @param {number} y\n       */\n    NbLayoutScrollService.prototype.scrollTo = /**\n       * Sets scroll position\n       *\n       * @param {number} x\n       * @param {number} y\n       */\n        function (x, y) {\n            if (x === void 0) {\n                x = null;\n            }\n            if (y === void 0) {\n                y = null;\n            }\n            this.manualScroll$.next({ x: x, y: y });\n        };\n    /**\n     * Returns a stream of scroll events\n     *\n     * @returns {Observable<any>}\n     */\n    /**\n       * Returns a stream of scroll events\n       *\n       * @returns {Observable<any>}\n       */\n    NbLayoutScrollService.prototype.onScroll = /**\n       * Returns a stream of scroll events\n       *\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.scroll$.pipe(share());\n        };\n    /**\n     * @private\n     * @returns Observable<NbScrollPosition>.\n     */\n    /**\n       * @private\n       * @returns Observable<NbScrollPosition>.\n       */\n    NbLayoutScrollService.prototype.onManualScroll = /**\n       * @private\n       * @returns Observable<NbScrollPosition>.\n       */\n        function () {\n            return this.manualScroll$.pipe(share());\n        };\n    /**\n     * @private\n     * @returns {Subject<any>}\n     */\n    /**\n       * @private\n       * @returns {Subject<any>}\n       */\n    NbLayoutScrollService.prototype.onGetPosition = /**\n       * @private\n       * @returns {Subject<any>}\n       */\n        function () {\n            return this.scrollPositionReq$;\n        };\n    /**\n     * @private\n     * @param {any} event\n     */\n    /**\n       * @private\n       * @param {any} event\n       */\n    NbLayoutScrollService.prototype.fireScrollChange = /**\n       * @private\n       * @param {any} event\n       */\n        function (event) {\n            this.scroll$.next(event);\n        };\n    return NbLayoutScrollService;\n}());\nexport { NbLayoutScrollService };\n//# sourceMappingURL=scroll.service.js.map\n",null]}