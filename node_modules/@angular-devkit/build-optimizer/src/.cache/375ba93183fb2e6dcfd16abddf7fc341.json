{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/radio/radio-group.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/radio/radio-group.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, EventEmitter, forwardRef, Input, Output, } from '@angular/core';\nimport { NbRadioComponent } from './radio.component';\nimport { merge } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { convertToBoolProperty } from '../helpers';\n/**\n * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.\n * It provides form bindings:\n *\n * ```html\n * <nb-radio-group [(ngModel)]=\"selectedOption\">\n *   <nb-radio>Option 1</nb-radio>\n *   <nb-radio>Option 2</nb-radio>\n *   <nb-radio>Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Also, you can use `value` and `valueChange` for binding without forms.\n *\n * ```html\n * <nb-radio-group [(value)]=\"selectedOption\">\n *   <nb-radio>Option 1</nb-radio>\n *   <nb-radio>Option 2</nb-radio>\n *   <nb-radio>Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Radio items name has to be provided through `name` input property of the radio group.\n *\n * ```html\n * <nb-radio-group name=\"my-radio-group\">\n *   ...\n * </nb-radio-group>\n * ```\n *\n * Also, you can disable the whole group using `disabled` attribute.\n *\n * ```html\n * <nb-radio-group disabled>\n *   ...\n * </nb-radio-group>\n * ```\n * */\nvar NbRadioGroupComponent = /*@__PURE__*/ (function () {\n    function NbRadioGroupComponent(cd) {\n        this.cd = cd;\n        this.valueChange = new EventEmitter();\n        this.alive = true;\n        this.onChange = function (value) { };\n    }\n    Object.defineProperty(NbRadioGroupComponent.prototype, \"setValue\", {\n        set: function (value) {\n            this.value = value;\n            this.updateValues();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbRadioGroupComponent.prototype, \"setName\", {\n        set: function (name) {\n            this.name = name;\n            this.updateNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbRadioGroupComponent.prototype, \"setDisabled\", {\n        set: function (disabled) {\n            this.disabled = convertToBoolProperty(disabled);\n            this.updateDisabled();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbRadioGroupComponent.prototype.ngAfterContentInit = function () {\n        this.updateNames();\n        this.updateValues();\n        this.updateDisabled();\n        this.subscribeOnRadiosValueChange();\n    };\n    NbRadioGroupComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    NbRadioGroupComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    NbRadioGroupComponent.prototype.registerOnTouched = function (fn) {\n    };\n    NbRadioGroupComponent.prototype.writeValue = function (value) {\n        this.value = value;\n        if (typeof value !== 'undefined') {\n            this.updateValues();\n        }\n    };\n    NbRadioGroupComponent.prototype.updateNames = function () {\n        var _this = this;\n        if (this.radios) {\n            this.radios.forEach(function (radio) { return radio.name = _this.name; });\n            this.markRadiosForCheck();\n        }\n    };\n    NbRadioGroupComponent.prototype.updateValues = function () {\n        var _this = this;\n        if (this.radios && typeof this.value !== 'undefined') {\n            this.radios.forEach(function (radio) { return radio.checked = radio.value === _this.value; });\n            this.markRadiosForCheck();\n        }\n    };\n    NbRadioGroupComponent.prototype.updateDisabled = function () {\n        var _this = this;\n        if (this.radios && typeof this.disabled !== 'undefined') {\n            this.radios.forEach(function (radio) { return radio.setDisabled = _this.disabled; });\n            this.markRadiosForCheck();\n        }\n    };\n    NbRadioGroupComponent.prototype.subscribeOnRadiosValueChange = function () {\n        var _this = this;\n        merge.apply(void 0, this.radios.map(function (radio) { return radio.valueChange; })).pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (value) {\n            _this.writeValue(value);\n            _this.propagateValue(value);\n        });\n    };\n    NbRadioGroupComponent.prototype.propagateValue = function (value) {\n        this.valueChange.emit(value);\n        this.onChange(value);\n    };\n    NbRadioGroupComponent.prototype.markRadiosForCheck = function () {\n        this.radios.forEach(function (radio) { return radio.markForCheck(); });\n    };\n    return NbRadioGroupComponent;\n}());\nexport { NbRadioGroupComponent };\n//# sourceMappingURL=radio-group.component.js.map\n",null]}