{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/select/select.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/select/select.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, Input, Output, ViewChild, } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { take, takeWhile } from 'rxjs/operators';\nimport { defer, merge } from 'rxjs';\nimport { NbAdjustment, NbOverlayService, NbPortalDirective, NbPosition, NbPositionBuilderService, NbTrigger, NbTriggerStrategyBuilder, } from '../cdk';\nimport { NbOptionComponent } from './option.component';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { convertToBoolProperty } from '../helpers';\nvar NbSelectLabelComponent = /*@__PURE__*/ (function () {\n    function NbSelectLabelComponent() {\n    }\n    return NbSelectLabelComponent;\n}());\nexport { NbSelectLabelComponent };\n/**\n * The `NbSelectComponent` provides a capability to select one of the passed items.\n *\n * @stacked-example(Showcase, select/select-showcase.component)\n *\n * ### Installation\n *\n * Import `NbSelectModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbSelectModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If you want to use it as the multi-select control you have to mark it as `multiple`.\n * In this case, `nb-select` will work only with arrays - accept arrays and propagate arrays.\n *\n * @stacked-example(Multiple, select/select-multiple.component)\n *\n * Items without values will clean selection.\n *\n * @stacked-example(Clean selection, select/select-clean.component)\n *\n * Select may be bounded using `selected` input:\n *\n * ```html\n * <nb-select [(selected)]=\"selected\"></nb-selected>\n * ```\n *\n * Or you can bind control with form controls or ngModel:\n *\n * @stacked-example(Select form binding, select/select-form.component)\n *\n * Options in the select may be grouped using `nb-option-group` component.\n *\n * @stacked-example(Grouping, select/select-groups.component)\n *\n * Select may have a placeholder that will be shown when nothing selected:\n *\n * @stacked-example(Placeholder, select/select-placeholder.component)\n *\n * You can disable select, options and whole groups.\n *\n * @stacked-example(Disabled select, select/select-disabled.component)\n *\n * Also, the custom label may be provided in select.\n * This custom label will be used for instead placeholder when something selected.\n *\n * @stacked-example(Custom label, select/select-label.component)\n *\n * Default `nb-select` size is `medium` and status color is `primary`.\n * Select is available in multiple colors using `status` property:\n *\n * @stacked-example(Select statuses, select/select-status.component)\n *\n * There are three select sizes:\n *\n * @stacked-example(Select sizes, select/select-sizes.component)\n *\n * And two additional style types - `outline`:\n *\n * @stacked-example(Outline select, select/select-outline.component)\n *\n * and `hero`:\n *\n * @stacked-example(Select colors, select/select-hero.component)\n *\n * Select is available in different shapes, that could be combined with the other properties:\n *\n * @stacked-example(Select shapes, select/select-shapes.component)\n *\n *\n * @styles\n *\n * select-border-width:\n * select-max-height:\n * select-bg:\n * select-checkbox-color:\n * select-checkmark-color:\n * select-option-disabled-bg:\n * select-option-disabled-opacity:\n * select-option-padding:\n * */\nvar NbSelectComponent = /*@__PURE__*/ (function () {\n    function NbSelectComponent(document, overlay, hostRef, positionBuilder, cd) {\n        var _this = this;\n        this.document = document;\n        this.overlay = overlay;\n        this.hostRef = hostRef;\n        this.positionBuilder = positionBuilder;\n        this.cd = cd;\n        /**\n           * Select status (adds specific styles):\n           * `primary`, `info`, `success`, `warning`, `danger`\n           */\n        this.status = 'primary';\n        /**\n           * Renders select placeholder if nothing selected.\n           * */\n        this.placeholder = '';\n        /**\n           * Will be emitted when selected value changes.\n           * */\n        this.selectedChange = new EventEmitter();\n        this.multiple = false;\n        /**\n           * List of selected options.\n           * */\n        this.selectionModel = [];\n        /**\n           * Current overlay position because of we have to toggle overlayPosition\n           * in [ngClass] direction and this directive can use only string.\n           */\n        this.overlayPosition = '';\n        /**\n           * Stream of events that will fire when one of the options fire selectionChange event.\n           * */\n        this.selectionChange = defer(function () {\n            return merge.apply(void 0, _this.options.map(function (it) { return it.selectionChange; }));\n        });\n        this.alive = true;\n        /**\n           * Function passed through control value accessor to propagate changes.\n           * */\n        this.onChange = function () { };\n    }\n    Object.defineProperty(NbSelectComponent.prototype, \"setSelected\", {\n        set: /**\n           * Accepts selected item or array of selected items.\n           * */ function (value) {\n            this.writeValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbSelectComponent.prototype, \"setMultiple\", {\n        set: /**\n           * Gives capability just write `multiple` over the element.\n           * */ function (multiple) {\n            this.multiple = convertToBoolProperty(multiple);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbSelectComponent.prototype, \"isOpened\", {\n        /**\n         * Determines is select opened.\n         * */\n        get: /**\n           * Determines is select opened.\n           * */ function () {\n            return this.ref && this.ref.hasAttached();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbSelectComponent.prototype, \"isHidden\", {\n        /**\n         * Determines is select hidden.\n         * */\n        get: /**\n           * Determines is select hidden.\n           * */ function () {\n            return !this.isOpened;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbSelectComponent.prototype, \"hostWidth\", {\n        /**\n         * Returns width of the select button.\n         * */\n        get: /**\n           * Returns width of the select button.\n           * */ function () {\n            return this.hostRef.nativeElement.getBoundingClientRect().width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbSelectComponent.prototype, \"selectionView\", {\n        /**\n         * Content rendered in the label.\n         * */\n        get: /**\n           * Content rendered in the label.\n           * */ function () {\n            if (this.selectionModel.length > 1) {\n                return this.selectionModel.map(function (option) { return option.content; }).join(', ');\n            }\n            return this.selectionModel[0].content;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbSelectComponent.prototype.ngOnInit = function () {\n        this.createOverlay();\n    };\n    NbSelectComponent.prototype.ngAfterViewInit = function () {\n        this.subscribeOnTriggers();\n        this.subscribeOnPositionChange();\n        this.subscribeOnSelectionChange();\n    };\n    NbSelectComponent.prototype.ngAfterContentInit = function () {\n        if (this.queue) {\n            this.writeValue(this.queue);\n        }\n    };\n    NbSelectComponent.prototype.ngOnDestroy = function () {\n        this.ref.dispose();\n    };\n    NbSelectComponent.prototype.show = function () {\n        if (this.isHidden) {\n            this.ref.attach(this.portal);\n            this.cd.markForCheck();\n        }\n    };\n    NbSelectComponent.prototype.hide = function () {\n        if (this.isOpened) {\n            this.ref.detach();\n            this.cd.markForCheck();\n        }\n    };\n    NbSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    NbSelectComponent.prototype.registerOnTouched = function (fn) {\n    };\n    NbSelectComponent.prototype.setDisabledState = function (isDisabled) {\n    };\n    NbSelectComponent.prototype.writeValue = function (value) {\n        if (!value) {\n            return;\n        }\n        if (this.options) {\n            this.setSelection(value);\n        }\n        else {\n            this.queue = value;\n        }\n    };\n    /**\n     * Selects option or clear all selected options if value is null.\n     * */\n    /**\n       * Selects option or clear all selected options if value is null.\n       * */\n    NbSelectComponent.prototype.handleSelect = /**\n       * Selects option or clear all selected options if value is null.\n       * */\n        function (option) {\n            if (option.value) {\n                this.selectOption(option);\n            }\n            else {\n                this.reset();\n            }\n            this.cd.detectChanges();\n        };\n    /**\n     * Deselect all selected options.\n     * */\n    /**\n       * Deselect all selected options.\n       * */\n    NbSelectComponent.prototype.reset = /**\n       * Deselect all selected options.\n       * */\n        function () {\n            this.selectionModel.forEach(function (option) { return option.deselect(); });\n            this.selectionModel = [];\n            this.hide();\n            this.emitSelected(null);\n        };\n    /**\n     * Determines how to select option as multiple or single.\n     * */\n    /**\n       * Determines how to select option as multiple or single.\n       * */\n    NbSelectComponent.prototype.selectOption = /**\n       * Determines how to select option as multiple or single.\n       * */\n        function (option) {\n            if (this.multiple) {\n                this.handleMultipleSelect(option);\n            }\n            else {\n                this.handleSingleSelect(option);\n            }\n        };\n    /**\n     * Select single option.\n     * */\n    /**\n       * Select single option.\n       * */\n    NbSelectComponent.prototype.handleSingleSelect = /**\n       * Select single option.\n       * */\n        function (option) {\n            var selected = this.selectionModel.pop();\n            if (selected && selected !== option) {\n                selected.deselect();\n            }\n            this.selectionModel = [option];\n            option.select();\n            this.hide();\n            this.emitSelected(option.value);\n        };\n    /**\n     * Select for multiple options.\n     * */\n    /**\n       * Select for multiple options.\n       * */\n    NbSelectComponent.prototype.handleMultipleSelect = /**\n       * Select for multiple options.\n       * */\n        function (option) {\n            if (option.selected) {\n                this.selectionModel = this.selectionModel.filter(function (s) { return s.value !== option.value; });\n                option.deselect();\n            }\n            else {\n                this.selectionModel.push(option);\n                option.select();\n            }\n            this.emitSelected(this.selectionModel.map(function (opt) { return opt.value; }));\n        };\n    NbSelectComponent.prototype.createOverlay = function () {\n        var scrollStrategy = this.createScrollStrategy();\n        this.positionStrategy = this.createPositionStrategy();\n        this.ref = this.overlay.create({ positionStrategy: this.positionStrategy, scrollStrategy: scrollStrategy });\n    };\n    NbSelectComponent.prototype.createPositionStrategy = function () {\n        return this.positionBuilder\n            .connectedTo(this.hostRef)\n            .position(NbPosition.BOTTOM)\n            .offset(0)\n            .adjustment(NbAdjustment.VERTICAL);\n    };\n    NbSelectComponent.prototype.createScrollStrategy = function () {\n        return this.overlay.scrollStrategies.block();\n    };\n    NbSelectComponent.prototype.subscribeOnTriggers = function () {\n        var _this = this;\n        var triggerStrategy = new NbTriggerStrategyBuilder()\n            .document(this.document)\n            .trigger(NbTrigger.CLICK)\n            .host(this.hostRef.nativeElement)\n            .container(function () { return _this.getContainer(); })\n            .build();\n        triggerStrategy.show$\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.show(); });\n        triggerStrategy.hide$\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.hide(); });\n    };\n    NbSelectComponent.prototype.subscribeOnPositionChange = function () {\n        var _this = this;\n        this.positionStrategy.positionChange\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (position) { return _this.overlayPosition = position; });\n        this.positionStrategy.positionChange\n            .pipe(take(1))\n            .subscribe(function () { return _this.cd.detectChanges(); });\n    };\n    NbSelectComponent.prototype.subscribeOnSelectionChange = function () {\n        var _this = this;\n        this.selectionChange\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (option) { return _this.handleSelect(option); });\n    };\n    NbSelectComponent.prototype.getContainer = function () {\n        return this.ref && this.ref.hasAttached() && {\n            location: {\n                nativeElement: this.ref.overlayElement,\n            },\n        };\n    };\n    /**\n     * Propagate selected value.\n     * */\n    /**\n       * Propagate selected value.\n       * */\n    NbSelectComponent.prototype.emitSelected = /**\n       * Propagate selected value.\n       * */\n        function (selected) {\n            this.onChange(selected);\n            this.selectedChange.emit(selected);\n        };\n    /**\n     * Set selected value in model.\n     * */\n    /**\n       * Set selected value in model.\n       * */\n    NbSelectComponent.prototype.setSelection = /**\n       * Set selected value in model.\n       * */\n        function (value) {\n            var _this = this;\n            var isArray = Array.isArray(value);\n            if (this.multiple && !isArray) {\n                throw new Error('Can\\'t assign single value if select is marked as multiple');\n            }\n            if (!this.multiple && isArray) {\n                throw new Error('Can\\'t assign array if select is not marked as multiple');\n            }\n            this.cleanSelection();\n            if (isArray) {\n                value.forEach(function (option) { return _this.selectValue(option); });\n            }\n            else {\n                this.selectValue(value);\n            }\n            this.cd.markForCheck();\n            this.cd.detectChanges();\n        };\n    NbSelectComponent.prototype.cleanSelection = function () {\n        this.selectionModel.forEach(function (option) { return option.deselect(); });\n        this.selectionModel = [];\n    };\n    /**\n     * Selects value.\n     * */\n    /**\n       * Selects value.\n       * */\n    NbSelectComponent.prototype.selectValue = /**\n       * Selects value.\n       * */\n        function (value) {\n            var corresponding = this.options.find(function (option) { return option.value === value; });\n            if (corresponding) {\n                corresponding.select();\n                this.selectionModel.push(corresponding);\n            }\n        };\n    return NbSelectComponent;\n}());\nexport { NbSelectComponent };\n//# sourceMappingURL=select.component.js.map\n",null]}