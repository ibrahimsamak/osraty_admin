{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/menu/menu.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/menu/menu.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { BehaviorSubject, ReplaySubject, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { isUrlPathContain, isUrlPathEqual } from './url-matching-helpers';\nvar itemClick$ = new Subject();\nvar addItems$ = new ReplaySubject(1);\nvar navigateHome$ = new ReplaySubject(1);\nvar getSelectedItem$ = new ReplaySubject(1);\nvar itemSelect$ = new ReplaySubject(1);\nvar itemHover$ = new ReplaySubject(1);\nvar submenuToggle$ = new ReplaySubject(1);\nvar collapseAll$ = new ReplaySubject(1);\n// TODO: check if we need both URL and LINK\n/**\n * Menu Item options\n */\nvar \n// TODO: check if we need both URL and LINK\n/**\n * Menu Item options\n */\nNbMenuItem = /*@__PURE__*/ (function () {\n    function NbMenuItem() {\n        /**\n           * Children items height\n           * @type {number}\n           */\n        this.subMenuHeight = 0;\n        /**\n           * Item is selected when partly or fully equal to the current url\n           * @type {string}\n           */\n        this.pathMatch = 'full';\n    }\n    /**\n     * @returns item parents in top-down order\n     */\n    /**\n       * @returns item parents in top-down order\n       */\n    NbMenuItem.getParents = /**\n       * @returns item parents in top-down order\n       */\n        function (item) {\n            var parents = [];\n            var parent = item.parent;\n            while (parent) {\n                parents.unshift(parent);\n                parent = parent.parent;\n            }\n            return parents;\n        };\n    NbMenuItem.isParent = function (item, possibleChild) {\n        return possibleChild.parent\n            ? possibleChild.parent === item || this.isParent(item, possibleChild.parent)\n            : false;\n    };\n    return NbMenuItem;\n}());\n// TODO: check if we need both URL and LINK\n/**\n * Menu Item options\n */\nexport { NbMenuItem };\n// TODO: map select events to router change events\n// TODO: review the interface\n/**\n * Menu Service. Allows you to listen to menu events, or to interact with a menu.\n */\nvar NbMenuService = /*@__PURE__*/ (function () {\n    function NbMenuService() {\n    }\n    /**\n     * Add items to the end of the menu items list\n     * @param {List<NbMenuItem>} items\n     * @param {string} tag\n     */\n    /**\n       * Add items to the end of the menu items list\n       * @param {List<NbMenuItem>} items\n       * @param {string} tag\n       */\n    NbMenuService.prototype.addItems = /**\n       * Add items to the end of the menu items list\n       * @param {List<NbMenuItem>} items\n       * @param {string} tag\n       */\n        function (items, tag) {\n            addItems$.next({ tag: tag, items: items });\n        };\n    /**\n     * Collapses all menu items\n     * @param {string} tag\n     */\n    /**\n       * Collapses all menu items\n       * @param {string} tag\n       */\n    NbMenuService.prototype.collapseAll = /**\n       * Collapses all menu items\n       * @param {string} tag\n       */\n        function (tag) {\n            collapseAll$.next({ tag: tag });\n        };\n    /**\n     * Navigate to the home menu item\n     * @param {string} tag\n     */\n    /**\n       * Navigate to the home menu item\n       * @param {string} tag\n       */\n    NbMenuService.prototype.navigateHome = /**\n       * Navigate to the home menu item\n       * @param {string} tag\n       */\n        function (tag) {\n            navigateHome$.next({ tag: tag });\n        };\n    /**\n     * Returns currently selected item. Won't subscribe to the future events.\n     * @param {string} tag\n     * @returns {Observable<{tag: string; item: NbMenuItem}>}\n     */\n    /**\n       * Returns currently selected item. Won't subscribe to the future events.\n       * @param {string} tag\n       * @returns {Observable<{tag: string; item: NbMenuItem}>}\n       */\n    NbMenuService.prototype.getSelectedItem = /**\n       * Returns currently selected item. Won't subscribe to the future events.\n       * @param {string} tag\n       * @returns {Observable<{tag: string; item: NbMenuItem}>}\n       */\n        function (tag) {\n            var listener = new BehaviorSubject(null);\n            getSelectedItem$.next({ tag: tag, listener: listener });\n            return listener.asObservable();\n        };\n    NbMenuService.prototype.onItemClick = function () {\n        return itemClick$.pipe(share());\n    };\n    NbMenuService.prototype.onItemSelect = function () {\n        return itemSelect$.pipe(share());\n    };\n    NbMenuService.prototype.onItemHover = function () {\n        return itemHover$.pipe(share());\n    };\n    NbMenuService.prototype.onSubmenuToggle = function () {\n        return submenuToggle$.pipe(share());\n    };\n    return NbMenuService;\n}());\nexport { NbMenuService };\nvar NbMenuInternalService = /*@__PURE__*/ (function () {\n    function NbMenuInternalService(location) {\n        this.location = location;\n    }\n    NbMenuInternalService.prototype.prepareItems = function (items) {\n        var _this = this;\n        var defaultItem = new NbMenuItem();\n        items.forEach(function (i) {\n            _this.applyDefaults(i, defaultItem);\n            _this.setParent(i);\n        });\n    };\n    NbMenuInternalService.prototype.selectFromUrl = function (items, tag, collapseOther) {\n        if (collapseOther === void 0) {\n            collapseOther = false;\n        }\n        var selectedItem = this.findItemByUrl(items);\n        if (selectedItem) {\n            this.selectItem(selectedItem, items, collapseOther, tag);\n        }\n    };\n    NbMenuInternalService.prototype.selectItem = function (item, items, collapseOther, tag) {\n        if (collapseOther === void 0) {\n            collapseOther = false;\n        }\n        var unselectedItems = this.resetSelection(items);\n        var collapsedItems = collapseOther ? this.collapseItems(items) : [];\n        for (var _i = 0, _a = NbMenuItem.getParents(item); _i < _a.length; _i++) {\n            var parent_1 = _a[_i];\n            parent_1.selected = true;\n            // emit event only for items that weren't selected before ('unselectedItems' contains items that were selected)\n            if (!unselectedItems.includes(parent_1)) {\n                this.itemSelect(parent_1, tag);\n            }\n            var wasNotExpanded = !parent_1.expanded;\n            parent_1.expanded = true;\n            var i = collapsedItems.indexOf(parent_1);\n            // emit event only for items that weren't expanded before.\n            // 'collapsedItems' contains items that were expanded, so no need to emit event.\n            // in case 'collapseOther' is false, 'collapsedItems' will be empty,\n            // so also check if item isn't expanded already ('wasNotExpanded').\n            if (i === -1 && wasNotExpanded) {\n                this.submenuToggle(parent_1, tag);\n            }\n            else {\n                collapsedItems.splice(i, 1);\n            }\n        }\n        item.selected = true;\n        // emit event only for items that weren't selected before ('unselectedItems' contains items that were selected)\n        if (!unselectedItems.includes(item)) {\n            this.itemSelect(item, tag);\n        }\n        // remaining items which wasn't expanded back after expanding all currently selected items\n        for (var _b = 0, collapsedItems_1 = collapsedItems; _b < collapsedItems_1.length; _b++) {\n            var collapsedItem = collapsedItems_1[_b];\n            this.submenuToggle(collapsedItem, tag);\n        }\n    };\n    NbMenuInternalService.prototype.collapseAll = function (items, tag, except) {\n        var collapsedItems = this.collapseItems(items, except);\n        for (var _i = 0, collapsedItems_2 = collapsedItems; _i < collapsedItems_2.length; _i++) {\n            var item = collapsedItems_2[_i];\n            this.submenuToggle(item, tag);\n        }\n    };\n    NbMenuInternalService.prototype.onAddItem = function () {\n        return addItems$.pipe(share());\n    };\n    NbMenuInternalService.prototype.onNavigateHome = function () {\n        return navigateHome$.pipe(share());\n    };\n    NbMenuInternalService.prototype.onCollapseAll = function () {\n        return collapseAll$.pipe(share());\n    };\n    NbMenuInternalService.prototype.onGetSelectedItem = function () {\n        return getSelectedItem$.pipe(share());\n    };\n    NbMenuInternalService.prototype.itemHover = function (item, tag) {\n        itemHover$.next({ tag: tag, item: item });\n    };\n    NbMenuInternalService.prototype.submenuToggle = function (item, tag) {\n        submenuToggle$.next({ tag: tag, item: item });\n    };\n    NbMenuInternalService.prototype.itemSelect = function (item, tag) {\n        itemSelect$.next({ tag: tag, item: item });\n    };\n    NbMenuInternalService.prototype.itemClick = function (item, tag) {\n        itemClick$.next({ tag: tag, item: item });\n    };\n    /**\n     * Unselect all given items deeply.\n     * @param items array of items to unselect.\n     * @returns items which selected value was changed.\n     */\n    /**\n       * Unselect all given items deeply.\n       * @param items array of items to unselect.\n       * @returns items which selected value was changed.\n       */\n    NbMenuInternalService.prototype.resetSelection = /**\n       * Unselect all given items deeply.\n       * @param items array of items to unselect.\n       * @returns items which selected value was changed.\n       */\n        function (items) {\n            var unselectedItems = [];\n            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n                var item = items_1[_i];\n                if (item.selected) {\n                    unselectedItems.push(item);\n                }\n                item.selected = false;\n                if (item.children) {\n                    unselectedItems.push.apply(unselectedItems, this.resetSelection(item.children));\n                }\n            }\n            return unselectedItems;\n        };\n    /**\n     * Collapse all given items deeply.\n     * @param items array of items to collapse.\n     * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.\n     * @returns items which expanded value was changed.\n     */\n    /**\n       * Collapse all given items deeply.\n       * @param items array of items to collapse.\n       * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.\n       * @returns items which expanded value was changed.\n       */\n    NbMenuInternalService.prototype.collapseItems = /**\n       * Collapse all given items deeply.\n       * @param items array of items to collapse.\n       * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.\n       * @returns items which expanded value was changed.\n       */\n        function (items, except) {\n            var collapsedItems = [];\n            for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n                var item = items_2[_i];\n                if (except && (item === except || NbMenuItem.isParent(item, except))) {\n                    continue;\n                }\n                if (item.expanded) {\n                    collapsedItems.push(item);\n                }\n                item.expanded = false;\n                if (item.children) {\n                    collapsedItems.push.apply(collapsedItems, this.collapseItems(item.children));\n                }\n            }\n            return collapsedItems;\n        };\n    NbMenuInternalService.prototype.applyDefaults = function (item, defaultItem) {\n        var _this = this;\n        var menuItem = __assign({}, item);\n        Object.assign(item, defaultItem, menuItem);\n        item.children && item.children.forEach(function (child) {\n            _this.applyDefaults(child, defaultItem);\n        });\n    };\n    NbMenuInternalService.prototype.setParent = function (item) {\n        var _this = this;\n        item.children && item.children.forEach(function (child) {\n            child.parent = item;\n            _this.setParent(child);\n        });\n    };\n    /**\n     * Find deepest item which link matches current URL path.\n     * @param items array of items to search in.\n     * @returns found item of undefined.\n     */\n    /**\n       * Find deepest item which link matches current URL path.\n       * @param items array of items to search in.\n       * @returns found item of undefined.\n       */\n    NbMenuInternalService.prototype.findItemByUrl = /**\n       * Find deepest item which link matches current URL path.\n       * @param items array of items to search in.\n       * @returns found item of undefined.\n       */\n        function (items) {\n            var _this = this;\n            var selectedItem;\n            items.some(function (item) {\n                if (item.children) {\n                    selectedItem = _this.findItemByUrl(item.children);\n                }\n                if (!selectedItem && _this.isSelectedInUrl(item)) {\n                    selectedItem = item;\n                }\n                return selectedItem;\n            });\n            return selectedItem;\n        };\n    NbMenuInternalService.prototype.isSelectedInUrl = function (item) {\n        var exact = item.pathMatch === 'full';\n        return exact\n            ? isUrlPathEqual(this.location.path(), item.link)\n            : isUrlPathContain(this.location.path(), item.link);\n    };\n    return NbMenuInternalService;\n}());\nexport { NbMenuInternalService };\n//# sourceMappingURL=menu.service.js.map\n",null]}