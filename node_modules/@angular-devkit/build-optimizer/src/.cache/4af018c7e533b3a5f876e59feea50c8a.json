{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/oauth2/oauth2-strategy.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/oauth2/oauth2-strategy.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NB_WINDOW } from '@nebular/theme';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthIllegalTokenError, NbAuthResult, } from '../../services/';\nimport { NbOAuth2ResponseType, auth2StrategyOptions, NbOAuth2GrantType, NbOAuth2ClientAuthMethod, } from './oauth2-strategy.options';\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   PASSWORD = 'password',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     requireValidToken: false,\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     requireValidToken: false,\n *     redirectUri?: string;\n *     scope?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *     requireValidToken: false,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\nvar NbOAuth2AuthStrategy = /*@__PURE__*/ (function (_super) {\n    __extends(NbOAuth2AuthStrategy, _super);\n    function NbOAuth2AuthStrategy(http, route, window) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.route = route;\n        _this.window = window;\n        _this.redirectResultHandlers = (_a = {},\n            _a[NbOAuth2ResponseType.CODE] = function () {\n                return observableOf(_this.route.snapshot.queryParams).pipe(switchMap(function (params) {\n                    if (params.code) {\n                        return _this.requestToken(params.code);\n                    }\n                    return observableOf(new NbAuthResult(false, params, _this.getOption('redirect.failure'), _this.getOption('defaultErrors'), []));\n                }));\n            },\n            _a[NbOAuth2ResponseType.TOKEN] = function () {\n                var module = 'authorize';\n                var requireValidToken = _this.getOption(module + \".requireValidToken\");\n                return observableOf(_this.route.snapshot.fragment).pipe(map(function (fragment) { return _this.parseHashAsQueryParams(fragment); }), map(function (params) {\n                    if (!params.error) {\n                        return new NbAuthResult(true, params, _this.getOption('redirect.success'), [], _this.getOption('defaultMessages'), _this.createToken(params, requireValidToken));\n                    }\n                    return new NbAuthResult(false, params, _this.getOption('redirect.failure'), _this.getOption('defaultErrors'), []);\n                }), catchError(function (err) {\n                    var errors = [];\n                    if (err instanceof NbAuthIllegalTokenError) {\n                        errors.push(err.message);\n                    }\n                    else {\n                        errors.push('Something went wrong.');\n                    }\n                    return observableOf(new NbAuthResult(false, err, _this.getOption('redirect.failure'), errors));\n                }));\n            },\n            _a);\n        _this.redirectResults = (_b = {},\n            _b[NbOAuth2ResponseType.CODE] = function () {\n                return observableOf(_this.route.snapshot.queryParams).pipe(map(function (params) { return !!(params && (params.code || params.error)); }));\n            },\n            _b[NbOAuth2ResponseType.TOKEN] = function () {\n                return observableOf(_this.route.snapshot.fragment).pipe(map(function (fragment) { return _this.parseHashAsQueryParams(fragment); }), map(function (params) { return !!(params && (params.access_token || params.error)); }));\n            },\n            _b);\n        _this.defaultOptions = auth2StrategyOptions;\n        return _this;\n        var _a, _b;\n    }\n    NbOAuth2AuthStrategy.setup = function (options) {\n        return [NbOAuth2AuthStrategy, options];\n    };\n    Object.defineProperty(NbOAuth2AuthStrategy.prototype, \"responseType\", {\n        get: function () {\n            return this.getOption('authorize.responseType');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbOAuth2AuthStrategy.prototype, \"clientAuthMethod\", {\n        get: function () {\n            return this.getOption('clientAuthMethod');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbOAuth2AuthStrategy.prototype.authenticate = function (data) {\n        var _this = this;\n        if (this.getOption('token.grantType') === NbOAuth2GrantType.PASSWORD) {\n            return this.passwordToken(data.email, data.password);\n        }\n        else {\n            return this.isRedirectResult()\n                .pipe(switchMap(function (result) {\n                if (!result) {\n                    _this.authorizeRedirect();\n                    return observableOf(new NbAuthResult(true));\n                }\n                return _this.getAuthorizationResult();\n            }));\n        }\n    };\n    NbOAuth2AuthStrategy.prototype.getAuthorizationResult = function () {\n        var redirectResultHandler = this.redirectResultHandlers[this.responseType];\n        if (redirectResultHandler) {\n            return redirectResultHandler.call(this);\n        }\n        throw new Error(\"'\" + this.responseType + \"' responseType is not supported,\\n                      only 'token' and 'code' are supported now\");\n    };\n    NbOAuth2AuthStrategy.prototype.refreshToken = function (token) {\n        var _this = this;\n        var module = 'refresh';\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.post(url, this.buildRefreshRequestData(token), this.buildAuthHeader())\n            .pipe(map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('redirect.success'), [], _this.getOption('defaultMessages'), _this.createRefreshedToken(res, token, requireValidToken));\n        }), catchError(function (res) { return _this.handleResponseError(res); }));\n    };\n    NbOAuth2AuthStrategy.prototype.passwordToken = function (username, password) {\n        var _this = this;\n        var module = 'token';\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.post(url, this.buildPasswordRequestData(username, password), this.buildAuthHeader())\n            .pipe(map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('redirect.success'), [], _this.getOption('defaultMessages'), _this.createToken(res, requireValidToken));\n        }), catchError(function (res) { return _this.handleResponseError(res); }));\n    };\n    NbOAuth2AuthStrategy.prototype.authorizeRedirect = function () {\n        this.window.location.href = this.buildRedirectUrl();\n    };\n    NbOAuth2AuthStrategy.prototype.isRedirectResult = function () {\n        return this.redirectResults[this.responseType].call(this);\n    };\n    NbOAuth2AuthStrategy.prototype.requestToken = function (code) {\n        var _this = this;\n        var module = 'token';\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.post(url, this.buildCodeRequestData(code), this.buildAuthHeader())\n            .pipe(map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('redirect.success'), [], _this.getOption('defaultMessages'), _this.createToken(res, requireValidToken));\n        }), catchError(function (res) { return _this.handleResponseError(res); }));\n    };\n    NbOAuth2AuthStrategy.prototype.buildCodeRequestData = function (code) {\n        var params = {\n            grant_type: this.getOption('token.grantType'),\n            code: code,\n            redirect_uri: this.getOption('token.redirectUri'),\n            client_id: this.getOption('clientId'),\n        };\n        return this.cleanParams(this.addCredentialsToParams(params));\n    };\n    NbOAuth2AuthStrategy.prototype.buildRefreshRequestData = function (token) {\n        var params = {\n            grant_type: this.getOption('refresh.grantType'),\n            refresh_token: token.getRefreshToken(),\n            scope: this.getOption('refresh.scope'),\n        };\n        return this.cleanParams(this.addCredentialsToParams(params));\n    };\n    NbOAuth2AuthStrategy.prototype.buildPasswordRequestData = function (username, password) {\n        var params = {\n            grant_type: this.getOption('token.grantType'),\n            username: username,\n            password: password,\n            scope: this.getOption('token.scope'),\n        };\n        return this.cleanParams(this.addCredentialsToParams(params));\n    };\n    NbOAuth2AuthStrategy.prototype.buildAuthHeader = function () {\n        if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.BASIC) {\n            if (this.getOption('clientId') && this.getOption('clientSecret')) {\n                return {\n                    headers: new HttpHeaders({\n                        'Authorization': 'Basic ' + btoa(this.getOption('clientId') + ':' + this.getOption('clientSecret')),\n                    }),\n                };\n            }\n            else {\n                throw Error('For basic client authentication method, please provide both clientId & clientSecret.');\n            }\n        }\n    };\n    NbOAuth2AuthStrategy.prototype.cleanParams = function (params) {\n        Object.entries(params)\n            .forEach(function (_a) {\n            var key = _a[0], val = _a[1];\n            return !val && delete params[key];\n        });\n        return params;\n    };\n    NbOAuth2AuthStrategy.prototype.addCredentialsToParams = function (params) {\n        if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.REQUEST_BODY) {\n            if (this.getOption('clientId') && this.getOption('clientSecret')) {\n                return __assign({}, params, { client_id: this.getOption('clientId'), client_secret: this.getOption('clientSecret') });\n            }\n            else {\n                throw Error('For request body client authentication method, please provide both clientId & clientSecret.');\n            }\n        }\n        return params;\n    };\n    NbOAuth2AuthStrategy.prototype.handleResponseError = function (res) {\n        var errors = [];\n        if (res instanceof HttpErrorResponse) {\n            if (res.error.error_description) {\n                errors.push(res.error.error_description);\n            }\n            else {\n                errors = this.getOption('defaultErrors');\n            }\n        }\n        else if (res instanceof NbAuthIllegalTokenError) {\n            errors.push(res.message);\n        }\n        else {\n            errors.push('Something went wrong.');\n        }\n        ;\n        return observableOf(new NbAuthResult(false, res, this.getOption('redirect.failure'), errors, []));\n    };\n    NbOAuth2AuthStrategy.prototype.buildRedirectUrl = function () {\n        var params = __assign({ response_type: this.getOption('authorize.responseType'), client_id: this.getOption('clientId'), redirect_uri: this.getOption('authorize.redirectUri'), scope: this.getOption('authorize.scope'), state: this.getOption('authorize.state') }, this.getOption('authorize.params'));\n        var endpoint = this.getActionEndpoint('authorize');\n        var query = Object.entries(params)\n            .filter(function (_a) {\n            var key = _a[0], val = _a[1];\n            return !!val;\n        })\n            .map(function (_a) {\n            var key = _a[0], val = _a[1];\n            return key + \"=\" + encodeURIComponent(val);\n        })\n            .join('&');\n        return endpoint + \"?\" + query;\n    };\n    NbOAuth2AuthStrategy.prototype.parseHashAsQueryParams = function (hash) {\n        return hash ? hash.split('&').reduce(function (acc, part) {\n            var item = part.split('=');\n            acc[item[0]] = decodeURIComponent(item[1]);\n            return acc;\n        }, {}) : {};\n    };\n    NbOAuth2AuthStrategy.prototype.createRefreshedToken = function (res, existingToken, requireValidToken) {\n        var refreshedToken = this.createToken(res, requireValidToken);\n        if (!refreshedToken.getRefreshToken() && existingToken.getRefreshToken()) {\n            refreshedToken.setRefreshToken(existingToken.getRefreshToken());\n        }\n        return refreshedToken;\n    };\n    NbOAuth2AuthStrategy.prototype.register = function (data) {\n        throw new Error('`register` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n    };\n    NbOAuth2AuthStrategy.prototype.requestPassword = function (data) {\n        throw new Error('`requestPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n    };\n    NbOAuth2AuthStrategy.prototype.resetPassword = function (data) {\n        if (data === void 0) {\n            data = {};\n        }\n        throw new Error('`resetPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n    };\n    NbOAuth2AuthStrategy.prototype.logout = function () {\n        return observableOf(new NbAuthResult(true));\n    };\n    return NbOAuth2AuthStrategy;\n}(NbAuthStrategy));\nexport { NbOAuth2AuthStrategy };\n//# sourceMappingURL=oauth2-strategy.js.map\n",null]}