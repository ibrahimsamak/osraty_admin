{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/ruler.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/ruler.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Simple helper service to return Layout dimensions\n * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element\n * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and\n * `.scrollable-container` in the second.\n */\nvar NbLayoutRulerService = /*@__PURE__*/ (function () {\n    function NbLayoutRulerService() {\n        this.contentDimensionsReq$ = new Subject();\n    }\n    /**\n     * Content dimensions\n     * @returns {Observable<NbLayoutDimensions>}\n     */\n    /**\n       * Content dimensions\n       * @returns {Observable<NbLayoutDimensions>}\n       */\n    NbLayoutRulerService.prototype.getDimensions = /**\n       * Content dimensions\n       * @returns {Observable<NbLayoutDimensions>}\n       */\n        function () {\n            var _this = this;\n            return Observable.create(function (observer) {\n                var listener = new Subject();\n                listener.subscribe(observer);\n                _this.contentDimensionsReq$.next({ listener: listener });\n                return function () { return listener.complete(); };\n            });\n        };\n    /**\n     * @private\n     * @returns {Subject<any>}\n     */\n    /**\n       * @private\n       * @returns {Subject<any>}\n       */\n    NbLayoutRulerService.prototype.onGetDimensions = /**\n       * @private\n       * @returns {Subject<any>}\n       */\n        function () {\n            return this.contentDimensionsReq$;\n        };\n    return NbLayoutRulerService;\n}());\nexport { NbLayoutRulerService };\n//# sourceMappingURL=ruler.service.js.map\n",null]}