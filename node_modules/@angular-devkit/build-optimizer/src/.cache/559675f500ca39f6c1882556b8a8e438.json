{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token-parceler.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token-parceler.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { nbAuthCreateToken } from './token';\nimport { NB_AUTH_TOKENS } from '../../auth.options';\nexport var NB_AUTH_FALLBACK_TOKEN = new InjectionToken('Nebular Auth Options');\n/**\n * Creates a token parcel which could be stored/restored\n */\nvar NbAuthTokenParceler = /*@__PURE__*/ (function () {\n    function NbAuthTokenParceler(fallbackClass, tokenClasses) {\n        this.fallbackClass = fallbackClass;\n        this.tokenClasses = tokenClasses;\n    }\n    NbAuthTokenParceler.prototype.wrap = function (token) {\n        return JSON.stringify({\n            name: token.getName(),\n            ownerStrategyName: token.getOwnerStrategyName(),\n            createdAt: token.getCreatedAt().getTime(),\n            value: token.toString(),\n        });\n    };\n    NbAuthTokenParceler.prototype.unwrap = function (value) {\n        var tokenClass = this.fallbackClass;\n        var tokenValue = '';\n        var tokenOwnerStrategyName = '';\n        var tokenCreatedAt = null;\n        var tokenPack = this.parseTokenPack(value);\n        if (tokenPack) {\n            tokenClass = this.getClassByName(tokenPack.name) || this.fallbackClass;\n            tokenValue = tokenPack.value;\n            tokenOwnerStrategyName = tokenPack.ownerStrategyName;\n            tokenCreatedAt = new Date(Number(tokenPack.createdAt));\n        }\n        return nbAuthCreateToken(tokenClass, tokenValue, tokenOwnerStrategyName, tokenCreatedAt);\n    };\n    // TODO: this could be moved to a separate token registry\n    // TODO: this could be moved to a separate token registry\n    NbAuthTokenParceler.prototype.getClassByName =\n        // TODO: this could be moved to a separate token registry\n        function (name) {\n            return this.tokenClasses.find(function (tokenClass) { return tokenClass.NAME === name; });\n        };\n    NbAuthTokenParceler.prototype.parseTokenPack = function (value) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (e) { }\n        return null;\n    };\n    return NbAuthTokenParceler;\n}());\nexport { NbAuthTokenParceler };\n//# sourceMappingURL=token-parceler.js.map\n",null]}