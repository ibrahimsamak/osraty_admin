{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/theme.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/services/theme.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { map, filter, pairwise, distinctUntilChanged, startWith, share } from 'rxjs/operators';\nimport { NB_THEME_OPTIONS } from '../theme.options';\nimport { NbJSThemesRegistry } from './js-themes-registry.service';\nimport { NbMediaBreakpointsService } from './breakpoints.service';\n/**\n * Main Nebular service. Includes various helper methods.\n */\nvar NbThemeService = /*@__PURE__*/ (function () {\n    function NbThemeService(options, breakpointService, jsThemesRegistry) {\n        this.options = options;\n        this.breakpointService = breakpointService;\n        this.jsThemesRegistry = jsThemesRegistry;\n        this.themeChanges$ = new ReplaySubject(1);\n        this.appendLayoutClass$ = new Subject();\n        this.removeLayoutClass$ = new Subject();\n        this.changeWindowWidth$ = new ReplaySubject(2);\n        if (options && options.name) {\n            this.changeTheme(options.name);\n        }\n    }\n    /**\n     * Change current application theme\n     * @param {string} name\n     */\n    /**\n       * Change current application theme\n       * @param {string} name\n       */\n    NbThemeService.prototype.changeTheme = /**\n       * Change current application theme\n       * @param {string} name\n       */\n        function (name) {\n            this.themeChanges$.next({ name: name, previous: this.currentTheme });\n            this.currentTheme = name;\n        };\n    NbThemeService.prototype.changeWindowWidth = function (width) {\n        this.changeWindowWidth$.next(width);\n    };\n    /**\n     * Returns a theme object with variables (color/paddings/etc) on a theme change.\n     * Once subscribed - returns current theme.\n     *\n     * @returns {Observable<NbJSThemeOptions>}\n     */\n    /**\n       * Returns a theme object with variables (color/paddings/etc) on a theme change.\n       * Once subscribed - returns current theme.\n       *\n       * @returns {Observable<NbJSThemeOptions>}\n       */\n    NbThemeService.prototype.getJsTheme = /**\n       * Returns a theme object with variables (color/paddings/etc) on a theme change.\n       * Once subscribed - returns current theme.\n       *\n       * @returns {Observable<NbJSThemeOptions>}\n       */\n        function () {\n            var _this = this;\n            return this.onThemeChange().pipe(map(function (theme) {\n                return _this.jsThemesRegistry.get(theme.name);\n            }));\n        };\n    /**\n     * Triggers media query breakpoint change\n     * Returns a pair where the first item is previous media breakpoint and the second item is current breakpoit.\n     * ```ts\n     *  [{ name: 'xs', width: 0 }, { name: 'md', width: 768 }] // change from `xs` to `md`\n     * ```\n     * @returns {Observable<[NbMediaBreakpoint, NbMediaBreakpoint]>}\n     */\n    /**\n       * Triggers media query breakpoint change\n       * Returns a pair where the first item is previous media breakpoint and the second item is current breakpoit.\n       * ```ts\n       *  [{ name: 'xs', width: 0 }, { name: 'md', width: 768 }] // change from `xs` to `md`\n       * ```\n       * @returns {Observable<[NbMediaBreakpoint, NbMediaBreakpoint]>}\n       */\n    NbThemeService.prototype.onMediaQueryChange = /**\n       * Triggers media query breakpoint change\n       * Returns a pair where the first item is previous media breakpoint and the second item is current breakpoit.\n       * ```ts\n       *  [{ name: 'xs', width: 0 }, { name: 'md', width: 768 }] // change from `xs` to `md`\n       * ```\n       * @returns {Observable<[NbMediaBreakpoint, NbMediaBreakpoint]>}\n       */\n        function () {\n            var _this = this;\n            return this.changeWindowWidth$\n                .pipe(startWith(undefined), pairwise(), map(function (_a) {\n                var prevWidth = _a[0], width = _a[1];\n                return [\n                    _this.breakpointService.getByWidth(prevWidth),\n                    _this.breakpointService.getByWidth(width),\n                ];\n            }), filter(function (_a) {\n                var prevPoint = _a[0], point = _a[1];\n                return prevPoint.name !== point.name;\n            }), distinctUntilChanged(null, function (params) { return params[0].name + params[1].name; }), share());\n        };\n    /**\n     * Triggered when current theme is changed\n     * @returns {Observable<any>}\n     */\n    /**\n       * Triggered when current theme is changed\n       * @returns {Observable<any>}\n       */\n    NbThemeService.prototype.onThemeChange = /**\n       * Triggered when current theme is changed\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.themeChanges$.pipe(share());\n        };\n    /**\n     * Append a class to nb-layout\n     * @param {string} className\n     */\n    /**\n       * Append a class to nb-layout\n       * @param {string} className\n       */\n    NbThemeService.prototype.appendLayoutClass = /**\n       * Append a class to nb-layout\n       * @param {string} className\n       */\n        function (className) {\n            this.appendLayoutClass$.next(className);\n        };\n    /**\n     * Triggered when a new class is added to nb-layout through `appendLayoutClass` method\n     * @returns {Observable<any>}\n     */\n    /**\n       * Triggered when a new class is added to nb-layout through `appendLayoutClass` method\n       * @returns {Observable<any>}\n       */\n    NbThemeService.prototype.onAppendLayoutClass = /**\n       * Triggered when a new class is added to nb-layout through `appendLayoutClass` method\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.appendLayoutClass$.pipe(share());\n        };\n    /**\n     * Removes a class from nb-layout\n     * @param {string} className\n     */\n    /**\n       * Removes a class from nb-layout\n       * @param {string} className\n       */\n    NbThemeService.prototype.removeLayoutClass = /**\n       * Removes a class from nb-layout\n       * @param {string} className\n       */\n        function (className) {\n            this.removeLayoutClass$.next(className);\n        };\n    /**\n     * Triggered when a class is removed from nb-layout through `removeLayoutClass` method\n     * @returns {Observable<any>}\n     */\n    /**\n       * Triggered when a class is removed from nb-layout through `removeLayoutClass` method\n       * @returns {Observable<any>}\n       */\n    NbThemeService.prototype.onRemoveLayoutClass = /**\n       * Triggered when a class is removed from nb-layout through `removeLayoutClass` method\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.removeLayoutClass$.pipe(share());\n        };\n    return NbThemeService;\n}());\nexport { NbThemeService };\n//# sourceMappingURL=theme.service.js.map\n",null]}