{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/auth-strategy.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/auth-strategy.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { HttpResponse } from '@angular/common/http';\nimport { deepExtend, getDeepFromObject } from '../helpers';\nimport { nbAuthCreateToken, NbAuthIllegalTokenError, } from '../services/token/token';\nvar NbAuthStrategy = /*@__PURE__*/ (function () {\n    function NbAuthStrategy() {\n    }\n    // we should keep this any and validation should be done in `register` method instead\n    // otherwise it won't be possible to pass an empty object\n    // we should keep this any and validation should be done in `register` method instead\n    // otherwise it won't be possible to pass an empty object\n    NbAuthStrategy.prototype.setOptions =\n        // we should keep this any and validation should be done in `register` method instead\n        // otherwise it won't be possible to pass an empty object\n        function (options) {\n            this.options = deepExtend({}, this.defaultOptions, options);\n        };\n    NbAuthStrategy.prototype.getOption = function (key) {\n        return getDeepFromObject(this.options, key, null);\n    };\n    NbAuthStrategy.prototype.createToken = function (value, failWhenInvalidToken) {\n        var token = nbAuthCreateToken(this.getOption('token.class'), value, this.getName());\n        // At this point, nbAuthCreateToken failed with NbAuthIllegalTokenError which MUST be intercepted by strategies\n        // Or token is created. It MAY be created even if backend did not return any token, in this case it is !Valid\n        if (failWhenInvalidToken && !token.isValid()) {\n            // If we require a valid token (i.e. isValid), then we MUST throw NbAuthIllegalTokenError so that the strategies\n            // intercept it\n            throw new NbAuthIllegalTokenError('Token is empty or invalid.');\n        }\n        return token;\n    };\n    NbAuthStrategy.prototype.getName = function () {\n        return this.getOption('name');\n    };\n    NbAuthStrategy.prototype.createFailResponse = function (data) {\n        return new HttpResponse({ body: {}, status: 401 });\n    };\n    NbAuthStrategy.prototype.createSuccessResponse = function (data) {\n        return new HttpResponse({ body: {}, status: 200 });\n    };\n    NbAuthStrategy.prototype.getActionEndpoint = function (action) {\n        var actionEndpoint = this.getOption(action + \".endpoint\");\n        var baseEndpoint = this.getOption('baseEndpoint');\n        return baseEndpoint + actionEndpoint;\n    };\n    return NbAuthStrategy;\n}());\nexport { NbAuthStrategy };\n//# sourceMappingURL=auth-strategy.js.map\n",null]}