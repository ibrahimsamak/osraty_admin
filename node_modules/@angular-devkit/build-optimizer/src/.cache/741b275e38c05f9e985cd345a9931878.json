{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/accordion/accordion-item.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/accordion/accordion-item.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, EventEmitter, HostBinding, Host, } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { NbAccordionComponent } from './accordion.component';\nimport { convertToBoolProperty } from '../helpers';\n/**\n * Component intended to be used within `<nb-accordion>` component\n */\nvar NbAccordionItemComponent = /*@__PURE__*/ (function () {\n    function NbAccordionItemComponent(accordion, cd) {\n        this.accordion = accordion;\n        this.cd = cd;\n        /**\n           * Emits whenever the expanded state of the accordion changes.\n           * Primarily used to facilitate two-way binding.\n           */\n        this.collapsedChange = new EventEmitter();\n        this.accordionItemInvalidate = new Subject();\n        this.collapsedValue = true;\n        this.disabledValue = false;\n        this.alive = true;\n    }\n    Object.defineProperty(NbAccordionItemComponent.prototype, \"collapsed\", {\n        get: /**\n           * Item is collapse (`true` by default)\n           * @type {boolean}\n           */ function () {\n            return this.collapsedValue;\n        },\n        set: function (val) {\n            this.collapsedValue = convertToBoolProperty(val);\n            this.collapsedChange.emit(this.collapsedValue);\n            this.invalidate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbAccordionItemComponent.prototype, \"expanded\", {\n        get: /**\n           * Item is expanded (`false` by default)\n           * @type {boolean}\n           */ function () {\n            return !this.collapsed;\n        },\n        set: function (val) {\n            this.collapsedValue = !convertToBoolProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbAccordionItemComponent.prototype, \"disabled\", {\n        get: /**\n           * Item is disabled and cannot be opened.\n           * @type {boolean}\n           */ function () {\n            return this.disabledValue;\n        },\n        set: function (val) {\n            this.disabledValue = convertToBoolProperty(val);\n            this.invalidate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open/close the item\n     */\n    /**\n       * Open/close the item\n       */\n    NbAccordionItemComponent.prototype.toggle = /**\n       * Open/close the item\n       */\n        function () {\n            if (!this.disabled) {\n                // we need this temporary variable as `openCloseItems.next` will change current value we need to save\n                var willSet = !this.collapsed;\n                if (!this.accordion.multi) {\n                    this.accordion.openCloseItems.next(true);\n                }\n                this.collapsed = willSet;\n            }\n        };\n    /**\n     * Open the item.\n     */\n    /**\n       * Open the item.\n       */\n    NbAccordionItemComponent.prototype.open = /**\n       * Open the item.\n       */\n        function () {\n            !this.disabled && (this.collapsed = false);\n        };\n    /**\n     * Collapse the item.\n     */\n    /**\n       * Collapse the item.\n       */\n    NbAccordionItemComponent.prototype.close = /**\n       * Collapse the item.\n       */\n        function () {\n            !this.disabled && (this.collapsed = true);\n        };\n    NbAccordionItemComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.accordion.openCloseItems\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (collapsed) {\n            !_this.disabled && (_this.collapsed = collapsed);\n        });\n    };\n    NbAccordionItemComponent.prototype.ngOnChanges = function (changes) {\n        this.accordionItemInvalidate.next(true);\n    };\n    NbAccordionItemComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n        this.accordionItemInvalidate.complete();\n    };\n    NbAccordionItemComponent.prototype.invalidate = function () {\n        this.accordionItemInvalidate.next(true);\n        this.cd.markForCheck();\n    };\n    return NbAccordionItemComponent;\n}());\nexport { NbAccordionItemComponent };\n//# sourceMappingURL=accordion-item.component.js.map\n",null]}