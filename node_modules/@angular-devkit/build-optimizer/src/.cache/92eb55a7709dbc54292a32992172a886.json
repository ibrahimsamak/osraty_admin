{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/chat/chat.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/chat/chat.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Input, HostBinding, ViewChild, ContentChildren, } from '@angular/core';\nimport { NbChatMessageComponent } from './chat-message.component';\n/**\n * Conversational UI collection - a set of components for chat-like UI construction.\n *\n * Main features:\n * - different message types support (text, image, file, file group, map, etc)\n * - drag & drop for images and files with preview\n * - different UI styles\n * - custom action buttons (coming soon)\n *\n * Here's a complete example build in a bot-like app. Type `help` to be able to receive different message types.\n * Enjoy the conversation and the beautiful UI.\n * @stacked-example(Showcase, chat/chat-showcase.component)\n *\n * Basic chat configuration and usage:\n * ```ts\n * <nb-chat title=\"Nebular Conversational UI\">\n *       <nb-chat-message *ngFor=\"let msg of messages\"\n *                        [type]=\"msg.type\"\n *                        [message]=\"msg.text\"\n *                        [reply]=\"msg.reply\"\n *                        [sender]=\"msg.user.name\"\n *                        [date]=\"msg.date\"\n *                        [files]=\"msg.files\"\n *                        [quote]=\"msg.quote\"\n *                        [latitude]=\"msg.latitude\"\n *                        [longitude]=\"msg.longitude\"\n *                        [avatar]=\"msg.user.avatar\">\n *   </nb-chat-message>\n *\n *   <nb-chat-form (send)=\"sendMessage($event)\" [dropFiles]=\"true\">\n *   </nb-chat-form>\n * </nb-chat>\n * ```\n * ### Installation\n *\n * Import `NbChatModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbChatModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * If you need to provide an API key for a `map` message type (which is required by Google Maps)\n * you may use `NbChatModule.forRoot({ ... })` call if this is a global app configuration\n * or `NbChatModule.forChild({ ... })` for a feature module configuration:\n *\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbChatModule.forRoot({ messageGoogleMapKey: 'MAP_KEY' }),\n *   ],\n * })\n * export class AppModule { }\n *\n * ### Usage\n *\n * There are three main components:\n * ```ts\n * <nb-chat>\n * </nb-chat> // chat container\n *\n * <nb-chat-form>\n * </nb-chat-form> // chat form with drag&drop files feature\n *\n * <nb-chat-message>\n * </nb-chat-message> // chat message, available multiple types\n * ```\n *\n * Two users conversation showcase:\n * @stacked-example(Conversation, chat/chat-conversation-showcase.component)\n *\n * Chat UI is also available in different colors by specifying a `[status]` input:\n *\n * @stacked-example(Colored Chat, chat/chat-colors.component)\n *\n * Also it is possible to configure sizes through `[size]` input:\n *\n * @stacked-example(Chat Sizes, chat/chat-sizes.component)\n *\n * @styles\n *\n * chat-font-size:\n * chat-fg:\n * chat-bg:\n * chat-border-radius:\n * chat-fg-text:\n * chat-height-xxsmall:\n * chat-height-xsmall:\n * chat-height-small:\n * chat-height-medium:\n * chat-height-large:\n * chat-height-xlarge:\n * chat-height-xxlarge:\n * chat-border:\n * chat-padding:\n * chat-shadow:\n * chat-separator:\n * chat-active-bg:\n * chat-disabled-bg:\n * chat-disabled-fg:\n * chat-primary-bg:\n * chat-info-bg:\n * chat-success-bg:\n * chat-warning-bg:\n * chat-danger-bg:\n */\nvar NbChatComponent = /*@__PURE__*/ (function () {\n    function NbChatComponent() {\n    }\n    Object.defineProperty(NbChatComponent.prototype, \"xxsmall\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_XXSMALL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"xsmall\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_XSMALL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"small\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_SMALL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"medium\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_MEDIUM;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"large\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_LARGE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"xlarge\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_XLARGE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"xxlarge\", {\n        get: function () {\n            return this.size === NbChatComponent.SIZE_XXLARGE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"active\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_ACTIVE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"disabled\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_DISABLED;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"primary\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_PRIMARY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"info\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_INFO;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"success\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_SUCCESS;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"warning\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_WARNING;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"danger\", {\n        get: function () {\n            return this.status === NbChatComponent.STATUS_DANGER;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"hasAccent\", {\n        get: function () {\n            return this.accent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"setSize\", {\n        set: /**\n           * Chat size, available sizes:\n           * xxsmall, xsmall, small, medium, large, xlarge, xxlarge\n           * @param {string} val\n           */ function (val) {\n            this.size = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbChatComponent.prototype, \"setStatus\", {\n        set: /**\n           * Chat status color (adds specific styles):\n           * active, disabled, primary, info, success, warning, danger\n           * @param {string} val\n           */ function (val) {\n            this.status = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbChatComponent.prototype.ngAfterViewChecked = function () {\n        this.scrollable.nativeElement.scrollTop = this.scrollable.nativeElement.scrollHeight;\n    };\n    NbChatComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.messages.changes\n            .subscribe(function (messages) { return _this.messages = messages; });\n    };\n    NbChatComponent.SIZE_XXSMALL = 'xxsmall';\n    NbChatComponent.SIZE_XSMALL = 'xsmall';\n    NbChatComponent.SIZE_SMALL = 'small';\n    NbChatComponent.SIZE_MEDIUM = 'medium';\n    NbChatComponent.SIZE_LARGE = 'large';\n    NbChatComponent.SIZE_XLARGE = 'xlarge';\n    NbChatComponent.SIZE_XXLARGE = 'xxlarge';\n    NbChatComponent.STATUS_ACTIVE = 'active';\n    NbChatComponent.STATUS_DISABLED = 'disabled';\n    NbChatComponent.STATUS_PRIMARY = 'primary';\n    NbChatComponent.STATUS_INFO = 'info';\n    NbChatComponent.STATUS_SUCCESS = 'success';\n    NbChatComponent.STATUS_WARNING = 'warning';\n    NbChatComponent.STATUS_DANGER = 'danger';\n    return NbChatComponent;\n}());\nexport { NbChatComponent };\n//# sourceMappingURL=chat.component.js.map\n",null]}