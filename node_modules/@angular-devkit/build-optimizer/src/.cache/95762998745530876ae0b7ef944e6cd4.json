{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/list/list-page-tracker.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/list/list-page-tracker.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Directive, ContentChildren, Input, ElementRef, Output, EventEmitter, } from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport 'intersection-observer';\nimport { NbListItemComponent } from './list.component';\n/**\n * List pager directive\n *\n * Directive allows you to determine page of currently viewing items.\n *\n */\nvar NbListPageTrackerDirective = /*@__PURE__*/ (function () {\n    function NbListPageTrackerDirective() {\n        var _this = this;\n        this.alive = true;\n        /**\n           * Page to start counting with.\n           */\n        this.startPage = 1;\n        /**\n           * Emits when another page become visible.\n           */\n        this.pageChange = new EventEmitter();\n        this.observer = new IntersectionObserver(function (entries) { return _this.checkForPageChange(entries); }, { threshold: 0.5 });\n    }\n    NbListPageTrackerDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.listItems && this.listItems.length) {\n            this.observeItems();\n        }\n        this.listItems.changes\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.observeItems(); });\n    };\n    NbListPageTrackerDirective.prototype.ngOnDestroy = function () {\n        this.observer.disconnect && this.observer.disconnect();\n    };\n    NbListPageTrackerDirective.prototype.observeItems = function () {\n        var _this = this;\n        this.listItems.forEach(function (i) { return _this.observer.observe(i.nativeElement); });\n    };\n    NbListPageTrackerDirective.prototype.checkForPageChange = function (entries) {\n        var mostVisiblePage = this.findMostVisiblePage(entries);\n        if (mostVisiblePage && this.currentPage !== mostVisiblePage) {\n            this.currentPage = mostVisiblePage;\n            this.pageChange.emit(this.currentPage);\n        }\n    };\n    NbListPageTrackerDirective.prototype.findMostVisiblePage = function (entries) {\n        var intersectionRatioByPage = new Map();\n        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n            var entry = entries_1[_i];\n            if (entry.intersectionRatio < 0.5) {\n                continue;\n            }\n            var elementIndex = this.elementIndex(entry.target);\n            if (elementIndex === -1) {\n                continue;\n            }\n            var page = this.startPage + Math.floor(elementIndex / this.pageSize);\n            var ratio = entry.intersectionRatio;\n            if (intersectionRatioByPage.has(page)) {\n                ratio += intersectionRatioByPage.get(page);\n            }\n            intersectionRatioByPage.set(page, ratio);\n        }\n        var maxRatio = 0;\n        var mostVisiblePage;\n        intersectionRatioByPage.forEach(function (ratio, page) {\n            if (ratio > maxRatio) {\n                maxRatio = ratio;\n                mostVisiblePage = page;\n            }\n        });\n        return mostVisiblePage;\n    };\n    NbListPageTrackerDirective.prototype.elementIndex = function (element) {\n        return element.parentElement && element.parentElement.children\n            ? Array.from(element.parentElement.children).indexOf(element)\n            : -1;\n    };\n    return NbListPageTrackerDirective;\n}());\nexport { NbListPageTrackerDirective };\n//# sourceMappingURL=list-page-tracker.directive.js.map\n",null]}