{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/toastr/toastr.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/toastr/toastr.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Inject, Injectable } from '@angular/core';\nimport { NbComponentPortal, NbOverlayService, NbPositionBuilderService, NbPositionHelper, patch, } from '../cdk';\nimport { NbToastrContainerComponent } from './toastr-container.component';\nimport { NB_TOASTR_CONFIG, NbToastrConfig } from './toastr-config';\nimport { NbToastStatus } from './model';\nvar NbToastContainer = /*@__PURE__*/ (function () {\n    function NbToastContainer(position, containerRef, positionHelper) {\n        this.position = position;\n        this.containerRef = containerRef;\n        this.positionHelper = positionHelper;\n        this.toasts = [];\n    }\n    NbToastContainer.prototype.attach = function (toast) {\n        if (toast.config.preventDuplicates && this.isDuplicate(toast)) {\n            return;\n        }\n        var toastComponent = this.attachToast(toast);\n        if (toast.config.destroyByClick) {\n            this.subscribeOnClick(toastComponent, toast);\n        }\n        if (toast.config.duration) {\n            this.setDestroyTimeout(toast);\n        }\n        this.prevToast = toast;\n    };\n    NbToastContainer.prototype.isDuplicate = function (toast) {\n        return this.prevToast\n            && this.prevToast.message === toast.message\n            && this.prevToast.title === toast.title;\n    };\n    NbToastContainer.prototype.attachToast = function (toast) {\n        if (this.positionHelper.isTopPosition(toast.config.position)) {\n            return this.attachToTop(toast);\n        }\n        else {\n            return this.attachToBottom(toast);\n        }\n    };\n    NbToastContainer.prototype.attachToTop = function (toast) {\n        this.toasts.unshift(toast);\n        this.updateContainer();\n        return this.containerRef.instance.toasts.first;\n    };\n    NbToastContainer.prototype.attachToBottom = function (toast) {\n        this.toasts.push(toast);\n        this.updateContainer();\n        return this.containerRef.instance.toasts.last;\n    };\n    NbToastContainer.prototype.setDestroyTimeout = function (toast) {\n        var _this = this;\n        setTimeout(function () { return _this.destroy(toast); }, toast.config.duration);\n    };\n    NbToastContainer.prototype.subscribeOnClick = function (toastComponent, toast) {\n        var _this = this;\n        toastComponent.destroy.subscribe(function () { return _this.destroy(toast); });\n    };\n    NbToastContainer.prototype.destroy = function (toast) {\n        this.toasts = this.toasts.filter(function (t) { return t !== toast; });\n        this.updateContainer();\n    };\n    NbToastContainer.prototype.updateContainer = function () {\n        patch(this.containerRef, { content: this.toasts, position: this.position });\n    };\n    return NbToastContainer;\n}());\nexport { NbToastContainer };\nvar NbToastrContainerRegistry = /*@__PURE__*/ (function () {\n    function NbToastrContainerRegistry(overlay, positionBuilder, positionHelper, cfr) {\n        this.overlay = overlay;\n        this.positionBuilder = positionBuilder;\n        this.positionHelper = positionHelper;\n        this.cfr = cfr;\n        this.overlays = new Map();\n    }\n    NbToastrContainerRegistry.prototype.get = function (position) {\n        var logicalPosition = this.positionHelper.toLogicalPosition(position);\n        if (!this.overlays.has(logicalPosition)) {\n            this.instantiateContainer(logicalPosition);\n        }\n        return this.overlays.get(logicalPosition);\n    };\n    NbToastrContainerRegistry.prototype.instantiateContainer = function (position) {\n        var container = this.createContainer(position);\n        this.overlays.set(position, container);\n    };\n    NbToastrContainerRegistry.prototype.createContainer = function (position) {\n        var positionStrategy = this.positionBuilder.global().position(position);\n        var ref = this.overlay.create({ positionStrategy: positionStrategy });\n        var containerRef = ref.attach(new NbComponentPortal(NbToastrContainerComponent, null, null, this.cfr));\n        return new NbToastContainer(position, containerRef, this.positionHelper);\n    };\n    return NbToastrContainerRegistry;\n}());\nexport { NbToastrContainerRegistry };\n/**\n * The `NbToastrService` provides a capability to build toast notifications.\n *\n * @stacked-example(Showcase, toastr/toastr-showcase.component)\n *\n * `NbToastrService.show(message, title, config)` accepts three params, title and config are optional.\n *\n * ### Installation\n *\n * Import `NbToastrModule.forRoot()` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbToastrModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * ### Usage\n *\n * Config accepts following options:\n *\n * `position` - determines where on the screen toast will be rendered.\n * Default is `top-end`.\n *\n * @stacked-example(Position, toastr/toastr-positions.component)\n *\n * `status` - coloring and icon of the toast.\n * Default is `primary`\n *\n * @stacked-example(Status, toastr/toastr-statuses.component)\n *\n * `duration` - the time after which the toast will be destroyed.\n * `0` means endless toast, that may be destroyed by click only.\n * Default is 3000 ms.\n *\n * @stacked-example(Duration, toastr/toastr-duration.component)\n *\n * `destroyByClick` - provides a capability to destroy toast by click.\n * Default is true.\n *\n * @stacked-example(Destroy by click, toastr/toastr-destroy-by-click.component)\n *\n * `preventDuplicates` - don't create new toast if it has the same title and the same message with previous one.\n * Default is false.\n *\n * @stacked-example(Prevent duplicates, toastr/toastr-prevent-duplicates.component)\n *\n * `hasIcon` - if true then render toast icon.\n * `icon` - you can pass icon class that will be applied into the toast.\n *\n * @stacked-example(Has icon, toastr/toastr-icon.component)\n * */\nvar NbToastrService = /*@__PURE__*/ (function () {\n    function NbToastrService(globalConfig, containerRegistry) {\n        this.globalConfig = globalConfig;\n        this.containerRegistry = containerRegistry;\n    }\n    /**\n     * Shows toast with message, title and user config.\n     * */\n    /**\n       * Shows toast with message, title and user config.\n       * */\n    NbToastrService.prototype.show = /**\n       * Shows toast with message, title and user config.\n       * */\n        function (message, title, userConfig) {\n            var config = new NbToastrConfig(__assign({}, this.globalConfig, userConfig));\n            var container = this.containerRegistry.get(config.position);\n            var toast = { message: message, title: title, config: config };\n            container.attach(toast);\n        };\n    /**\n     * Shows success toast with message, title and user config.\n     * */\n    /**\n       * Shows success toast with message, title and user config.\n       * */\n    NbToastrService.prototype.success = /**\n       * Shows success toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.SUCCESS }));\n        };\n    /**\n     * Shows info toast with message, title and user config.\n     * */\n    /**\n       * Shows info toast with message, title and user config.\n       * */\n    NbToastrService.prototype.info = /**\n       * Shows info toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.INFO }));\n        };\n    /**\n     * Shows warning toast with message, title and user config.\n     * */\n    /**\n       * Shows warning toast with message, title and user config.\n       * */\n    NbToastrService.prototype.warning = /**\n       * Shows warning toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.WARNING }));\n        };\n    /**\n     * Shows primary toast with message, title and user config.\n     * */\n    /**\n       * Shows primary toast with message, title and user config.\n       * */\n    NbToastrService.prototype.primary = /**\n       * Shows primary toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.PRIMARY }));\n        };\n    /**\n     * Shows danger toast with message, title and user config.\n     * */\n    /**\n       * Shows danger toast with message, title and user config.\n       * */\n    NbToastrService.prototype.danger = /**\n       * Shows danger toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.DANGER }));\n        };\n    /**\n     * Shows default toast with message, title and user config.\n     * */\n    /**\n       * Shows default toast with message, title and user config.\n       * */\n    NbToastrService.prototype.default = /**\n       * Shows default toast with message, title and user config.\n       * */\n        function (message, title, config) {\n            return this.show(message, title, __assign({}, config, { status: NbToastStatus.DEFAULT }));\n        };\n    return NbToastrService;\n}());\nexport { NbToastrService };\n//# sourceMappingURL=toastr.service.js.map\n",null]}