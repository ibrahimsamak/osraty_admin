{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/password/password-strategy.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/strategies/password/password-strategy.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { passwordStrategyOptions } from './password-strategy-options';\nimport { NbAuthIllegalTokenError } from '../../services/token/token';\n/**\n * The most common authentication provider for email/password strategy.\n *\n * Strategy settings. Note, there is no need to copy over the whole object to change the settings you need.\n * Also, this.getOption call won't work outside of the default options declaration\n * (which is inside of the `NbPasswordAuthStrategy` class), so you have to replace it with a custom helper function\n * if you need it.\n *\n * ```ts\n *export class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n *  name: string;\n *  baseEndpoint? = '/api/auth/';\n *  login?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'login',\n *    method: 'post',\n *    requireValidToken: false,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n *    defaultMessages: ['You have been successfully logged in.'],\n *  };\n *  register?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'register',\n *    method: 'post',\n *    requireValidToken: false,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully registered.'],\n *  };\n *  requestPass?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'request-pass',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Reset password instructions have been sent to your email.'],\n *  };\n *  resetPass?: boolean | NbPasswordStrategyReset = {\n *    endpoint: 'reset-pass',\n *    method: 'put',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    resetPasswordTokenKey: 'reset_password_token',\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your password has been successfully changed.'],\n *  };\n *  logout?: boolean | NbPasswordStrategyReset = {\n *    alwaysFail: false,\n *    endpoint: 'logout',\n *    method: 'delete',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully logged out.'],\n *  };\n *  refreshToken?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'refresh-token',\n *    method: 'post',\n *    requireValidToken: false,\n *    redirect: {\n *      success: null,\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your token has been successfully refreshed.'],\n *  };\n *  token?: NbPasswordStrategyToken = {\n *    class: NbAuthSimpleToken,\n *    key: 'data.token',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.token.key,\n *    ),\n *  };\n *  errors?: NbPasswordStrategyMessage = {\n *    key: 'data.errors',\n *    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.error,\n *      options.errors.key,\n *      options[module].defaultErrors,\n *    ),\n *  };\n *  messages?: NbPasswordStrategyMessage = {\n *    key: 'data.messages',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.messages.key,\n *      options[module].defaultMessages,\n *    ),\n *  };\n *  validation?: {\n *    password?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *    email?: {\n *      required?: boolean;\n *      regexp?: string | null;\n *    };\n *    fullName?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *  };\n *}\n * ```\n */\nvar NbPasswordAuthStrategy = /*@__PURE__*/ (function (_super) {\n    __extends(NbPasswordAuthStrategy, _super);\n    function NbPasswordAuthStrategy(http, route) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.route = route;\n        _this.defaultOptions = passwordStrategyOptions;\n        return _this;\n    }\n    NbPasswordAuthStrategy.setup = function (options) {\n        return [NbPasswordAuthStrategy, options];\n    };\n    NbPasswordAuthStrategy.prototype.authenticate = function (data) {\n        var _this = this;\n        var module = 'login';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options), _this.createToken(_this.getOption('token.getter')(module, res, _this.options), requireValidToken));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.register = function (data) {\n        var _this = this;\n        var module = 'register';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options), _this.createToken(_this.getOption('token.getter')('login', res, _this.options), requireValidToken));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.requestPassword = function (data) {\n        var _this = this;\n        var module = 'requestPass';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.resetPassword = function (data) {\n        var _this = this;\n        if (data === void 0) {\n            data = {};\n        }\n        var module = 'resetPass';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        var tokenKey = this.getOption(module + \".resetPasswordTokenKey\");\n        data[tokenKey] = this.route.snapshot.queryParams[tokenKey];\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.logout = function () {\n        var _this = this;\n        var module = 'logout';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        return observableOf({})\n            .pipe(switchMap(function (res) {\n            if (!url) {\n                return observableOf(res);\n            }\n            return _this.http.request(method, url, { observe: 'response' });\n        }), map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.refreshToken = function (data) {\n        var _this = this;\n        var module = 'refreshToken';\n        var method = this.getOption(module + \".method\");\n        var url = this.getActionEndpoint(module);\n        var requireValidToken = this.getOption(module + \".requireValidToken\");\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption(module + \".alwaysFail\")) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption(module + \".redirect.success\"), [], _this.getOption('messages.getter')(module, res, _this.options), _this.createToken(_this.getOption('token.getter')(module, res, _this.options), requireValidToken));\n        }), catchError(function (res) {\n            return _this.handleResponseError(res, module);\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.handleResponseError = function (res, module) {\n        var errors = [];\n        if (res instanceof HttpErrorResponse) {\n            errors = this.getOption('errors.getter')(module, res, this.options);\n        }\n        else if (res instanceof NbAuthIllegalTokenError) {\n            errors.push(res.message);\n        }\n        else {\n            errors.push('Something went wrong.');\n        }\n        return observableOf(new NbAuthResult(false, res, this.getOption(module + \".redirect.failure\"), errors));\n    };\n    return NbPasswordAuthStrategy;\n}(NbAuthStrategy));\nexport { NbPasswordAuthStrategy };\n//# sourceMappingURL=password-strategy.js.map\n",null]}