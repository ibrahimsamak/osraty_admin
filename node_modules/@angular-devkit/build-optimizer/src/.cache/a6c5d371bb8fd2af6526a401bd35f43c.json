{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/interceptors/jwt-interceptor.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/interceptors/jwt-interceptor.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable, Injector } from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_TOKEN_INTERCEPTOR_FILTER } from '../../auth.options';\nvar NbAuthJWTInterceptor = /*@__PURE__*/ (function () {\n    function NbAuthJWTInterceptor(injector, filter) {\n        this.injector = injector;\n        this.filter = filter;\n    }\n    NbAuthJWTInterceptor.prototype.intercept = function (req, next) {\n        var _this = this;\n        // do not intercept request whose urls are filtered by the injected filter\n        if (!this.filter(req)) {\n            return this.authService.isAuthenticatedOrRefresh()\n                .pipe(switchMap(function (authenticated) {\n                if (authenticated) {\n                    return _this.authService.getToken().pipe(switchMap(function (token) {\n                        var JWT = \"Bearer \" + token.getValue();\n                        req = req.clone({\n                            setHeaders: {\n                                Authorization: JWT,\n                            },\n                        });\n                        return next.handle(req);\n                    }));\n                }\n                else {\n                    // Request is sent to server without authentication so that the client code\n                    // receives the 401/403 error and can act as desired ('session expired', redirect to login, aso)\n                    return next.handle(req);\n                }\n            }));\n        }\n        else {\n            return next.handle(req);\n        }\n    };\n    Object.defineProperty(NbAuthJWTInterceptor.prototype, \"authService\", {\n        get: function () {\n            return this.injector.get(NbAuthService);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NbAuthJWTInterceptor;\n}());\nexport { NbAuthJWTInterceptor };\n//# sourceMappingURL=jwt-interceptor.js.map\n",null]}