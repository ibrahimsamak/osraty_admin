{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/calendar-kit/services/native-date.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/calendar-kit/services/native-date.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\nimport { DatePipe, FormStyle, getLocaleDayNames, getLocaleFirstDayOfWeek, getLocaleMonthNames, TranslationWidth, } from '@angular/common';\nimport { NbDateService } from './date.service';\n/**\n * The `NbNativeDateService` is basic implementation of `NbDateService` using\n * native js date objects and angular localization services.\n * */\nvar NbNativeDateService = /*@__PURE__*/ (function (_super) {\n    __extends(NbNativeDateService, _super);\n    function NbNativeDateService(locale) {\n        var _this = _super.call(this) || this;\n        _this.setLocale(locale);\n        return _this;\n    }\n    NbNativeDateService.prototype.setLocale = function (locale) {\n        _super.prototype.setLocale.call(this, locale);\n        this.datePipe = new DatePipe(locale);\n    };\n    NbNativeDateService.prototype.isValidDateString = function (date, format) {\n        return !isNaN(this.parse(date, format).getTime());\n    };\n    NbNativeDateService.prototype.today = function () {\n        return new Date();\n    };\n    NbNativeDateService.prototype.getDate = function (date) {\n        return date.getDate();\n    };\n    NbNativeDateService.prototype.getMonth = function (date) {\n        return date.getMonth();\n    };\n    NbNativeDateService.prototype.getYear = function (date) {\n        return date.getFullYear();\n    };\n    NbNativeDateService.prototype.getDayOfWeek = function (date) {\n        return date.getDay();\n    };\n    /**\n     * returns first day of the week, it can be 1 if week starts from monday\n     * and 0 if from sunday and so on.\n     * */\n    /**\n       * returns first day of the week, it can be 1 if week starts from monday\n       * and 0 if from sunday and so on.\n       * */\n    NbNativeDateService.prototype.getFirstDayOfWeek = /**\n       * returns first day of the week, it can be 1 if week starts from monday\n       * and 0 if from sunday and so on.\n       * */\n        function () {\n            return getLocaleFirstDayOfWeek(this.locale);\n        };\n    NbNativeDateService.prototype.getMonthName = function (date, style) {\n        if (style === void 0) {\n            style = TranslationWidth.Abbreviated;\n        }\n        var index = date.getMonth();\n        return this.getMonthNameByIndex(index, style);\n    };\n    NbNativeDateService.prototype.getMonthNameByIndex = function (index, style) {\n        if (style === void 0) {\n            style = TranslationWidth.Abbreviated;\n        }\n        return getLocaleMonthNames(this.locale, FormStyle.Format, style)[index];\n    };\n    NbNativeDateService.prototype.getDayOfWeekNames = function () {\n        return getLocaleDayNames(this.locale, FormStyle.Format, TranslationWidth.Short);\n    };\n    NbNativeDateService.prototype.format = function (date, format) {\n        return this.datePipe.transform(date, format);\n    };\n    /**\n     * We haven't got capability to parse date using formatting without third party libraries.\n     * */\n    /**\n       * We haven't got capability to parse date using formatting without third party libraries.\n       * */\n    NbNativeDateService.prototype.parse = /**\n       * We haven't got capability to parse date using formatting without third party libraries.\n       * */\n        function (date, format) {\n            return new Date(Date.parse(date));\n        };\n    NbNativeDateService.prototype.addDay = function (date, num) {\n        return this.createDate(date.getFullYear(), date.getMonth(), date.getDate() + num);\n    };\n    NbNativeDateService.prototype.addMonth = function (date, num) {\n        return this.createDate(date.getFullYear(), date.getMonth() + num, date.getDate());\n    };\n    NbNativeDateService.prototype.addYear = function (date, num) {\n        return this.createDate(date.getFullYear() + num, date.getMonth(), date.getDate());\n    };\n    NbNativeDateService.prototype.clone = function (date) {\n        return new Date(date.getTime());\n    };\n    NbNativeDateService.prototype.compareDates = function (date1, date2) {\n        return date1.getTime() - date2.getTime();\n    };\n    NbNativeDateService.prototype.createDate = function (year, month, date) {\n        var result = new Date(year, month, date);\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n        // abbreviations for 19xx.\n        if (year >= 0 && year < 100) {\n            result.setFullYear(result.getFullYear() - 1900);\n        }\n        return result;\n    };\n    NbNativeDateService.prototype.getMonthEnd = function (date) {\n        return this.createDate(date.getFullYear(), date.getMonth() + 1, 0);\n    };\n    NbNativeDateService.prototype.getMonthStart = function (date) {\n        return this.createDate(date.getFullYear(), date.getMonth(), 1);\n    };\n    NbNativeDateService.prototype.getNumberOfDaysInMonth = function (date) {\n        return this.getMonthEnd(date).getDate();\n    };\n    NbNativeDateService.prototype.getYearEnd = function (date) {\n        return this.createDate(date.getFullYear(), 11, 31);\n    };\n    NbNativeDateService.prototype.getYearStart = function (date) {\n        return this.createDate(date.getFullYear(), 0, 1);\n    };\n    NbNativeDateService.prototype.isSameDay = function (date1, date2) {\n        return this.isSameMonth(date1, date2) &&\n            date1.getDate() === date2.getDate();\n    };\n    NbNativeDateService.prototype.isSameMonth = function (date1, date2) {\n        return this.isSameYear(date1, date2) &&\n            date1.getMonth() === date2.getMonth();\n    };\n    NbNativeDateService.prototype.isSameYear = function (date1, date2) {\n        return date1.getFullYear() === date2.getFullYear();\n    };\n    return NbNativeDateService;\n}(NbDateService));\nexport { NbNativeDateService };\n//# sourceMappingURL=native-date.service.js.map\n",null]}