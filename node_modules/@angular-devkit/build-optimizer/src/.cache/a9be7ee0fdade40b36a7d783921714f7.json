{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window-ref.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window-ref.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { ReplaySubject, Subject } from 'rxjs';\nimport { NbWindowState } from './window.options';\n/**\n * The `NbWindowRef` helps to manipulate window after it was created.\n * The window can be dismissed by using `close` method of the windowRef.\n * You can access rendered component as `componentRef` property of the windowRef.\n */\nvar /**\n * The `NbWindowRef` helps to manipulate window after it was created.\n * The window can be dismissed by using `close` method of the windowRef.\n * You can access rendered component as `componentRef` property of the windowRef.\n */\nNbWindowRef = /** @class */ (function () {\n    function NbWindowRef(config) {\n        this.config = config;\n        this.stateChange$ = new ReplaySubject(1);\n        this._closed = false;\n        this.closed$ = new Subject();\n        this.state = config.initialState;\n    }\n    Object.defineProperty(NbWindowRef.prototype, \"state\", {\n        /**\n         * Current window state.\n         */\n        get: /**\n           * Current window state.\n           */\n        function () {\n            return this.stateValue;\n        },\n        set: function (newState) {\n            if (newState && this.stateValue !== newState) {\n                this.prevStateValue = this.state;\n                this.stateValue = newState;\n                this.stateChange$.next({ oldState: this.prevStateValue, newState: newState });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbWindowRef.prototype, \"stateChange\", {\n        /**\n         * Emits when window state change.\n         */\n        get: /**\n           * Emits when window state change.\n           */\n        function () {\n            return this.stateChange$.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbWindowRef.prototype, \"onClose\", {\n        /**\n         * Emits when window was closed.\n         */\n        get: /**\n           * Emits when window was closed.\n           */\n        function () {\n            return this.closed$.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Minimize window.\n     */\n    /**\n       * Minimize window.\n       */\n    NbWindowRef.prototype.minimize = /**\n       * Minimize window.\n       */\n    function () {\n        this.state = NbWindowState.MINIMIZED;\n    };\n    /**\n     * Maximize window.\n     */\n    /**\n       * Maximize window.\n       */\n    NbWindowRef.prototype.maximize = /**\n       * Maximize window.\n       */\n    function () {\n        this.state = NbWindowState.MAXIMIZED;\n    };\n    /**\n     * Set window on top.\n     */\n    /**\n       * Set window on top.\n       */\n    NbWindowRef.prototype.fullScreen = /**\n       * Set window on top.\n       */\n    function () {\n        this.state = NbWindowState.FULL_SCREEN;\n    };\n    NbWindowRef.prototype.toPreviousState = function () {\n        this.state = this.prevStateValue;\n    };\n    /**\n     * Closes window.\n     * */\n    /**\n       * Closes window.\n       * */\n    NbWindowRef.prototype.close = /**\n       * Closes window.\n       * */\n    function () {\n        if (this._closed) {\n            return;\n        }\n        this._closed = true;\n        this.componentRef.destroy();\n        this.stateChange$.complete();\n        this.closed$.next();\n        this.closed$.complete();\n    };\n    return NbWindowRef;\n}());\n/**\n * The `NbWindowRef` helps to manipulate window after it was created.\n * The window can be dismissed by using `close` method of the windowRef.\n * You can access rendered component as `componentRef` property of the windowRef.\n */\nexport { NbWindowRef };\n//# sourceMappingURL=window-ref.js.map",null]}