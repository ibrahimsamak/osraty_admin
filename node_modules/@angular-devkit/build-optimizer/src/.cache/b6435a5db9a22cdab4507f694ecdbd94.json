{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/leaflet-layer.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@asymmetrik/ngx-leaflet/dist/leaflet/layers/leaflet-layer.directive.js","mtime":1514571139000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Directive, Input, NgZone } from '@angular/core';\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\nvar LeafletLayerDirective = /*@__PURE__*/ (function () {\n    function LeafletLayerDirective(leafletDirective, zone) {\n        this.zone = zone;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletLayerDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n    };\n    LeafletLayerDirective.prototype.ngOnDestroy = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.layer.remove();\n        });\n    };\n    LeafletLayerDirective.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes['layer']) {\n            // Update the layer\n            var p_1 = changes['layer'].previousValue;\n            var n_1 = changes['layer'].currentValue;\n            this.zone.runOutsideAngular(function () {\n                if (null != p_1) {\n                    p_1.remove();\n                }\n                if (null != n_1) {\n                    _this.leafletDirective.getMap().addLayer(n_1);\n                }\n            });\n        }\n    };\n    return LeafletLayerDirective;\n}());\nexport { LeafletLayerDirective };\n//# sourceMappingURL=leaflet-layer.directive.js.map\n",null]}