{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/tooltip/tooltip.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/tooltip/tooltip.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Directive, ElementRef, Inject, Input } from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport { createContainer, NbAdjustment, NbOverlayService, NbPosition, NbPositionBuilderService, NbTrigger, NbTriggerStrategyBuilder, patch, } from '../cdk';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NbTooltipComponent } from './tooltip.component';\n/**\n *\n * Tooltip directive for small text/icon hints.\n *\n * ### Installation\n *\n * Import `NbTooltipModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbTooltipModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * @stacked-example(Showcase, tooltip/tooltip-showcase.component)\n *\n * Tooltip can accept a hint text and/or an icon:\n * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)\n *\n * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` proprety:\n * @stacked-example(Placements, tooltip/tooltip-placements.component)\n *\n * It is also possible to specify tooltip color using `nbTooltipStatus` property:\n * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)\n *\n */\nvar NbTooltipDirective = /*@__PURE__*/ (function () {\n    function NbTooltipDirective(document, hostRef, positionBuilder, overlay) {\n        this.document = document;\n        this.hostRef = hostRef;\n        this.positionBuilder = positionBuilder;\n        this.overlay = overlay;\n        this.context = {};\n        /**\n           * Position will be calculated relatively host element based on the position.\n           * Can be top, right, bottom, left, start or end.\n           */\n        this.position = NbPosition.TOP;\n        /**\n           * Container position will be changes automatically based on this strategy if container can't fit view port.\n           * Set this property to any falsy value if you want to disable automatically adjustment.\n           * Available values: clockwise, counterclockwise.\n           */\n        this.adjustment = NbAdjustment.CLOCKWISE;\n        this.alive = true;\n    }\n    Object.defineProperty(NbTooltipDirective.prototype, \"icon\", {\n        set: /**\n           *\n           * @param {string} icon\n           */ function (icon) {\n            this.context = Object.assign(this.context, { icon: icon });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbTooltipDirective.prototype, \"status\", {\n        set: /**\n           *\n           * @param {string} status\n           */ function (status) {\n            this.context = Object.assign(this.context, { status: status });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbTooltipDirective.prototype.ngAfterViewInit = function () {\n        this.positionStrategy = this.createPositionStrategy();\n        this.ref = this.overlay.create({\n            positionStrategy: this.positionStrategy,\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\n        });\n        this.triggerStrategy = this.createTriggerStrategy();\n        this.subscribeOnTriggers();\n        this.subscribeOnPositionChange();\n    };\n    NbTooltipDirective.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    NbTooltipDirective.prototype.show = function () {\n        this.container = createContainer(this.ref, NbTooltipComponent, {\n            position: this.position,\n            content: this.content,\n            context: this.context,\n        });\n    };\n    NbTooltipDirective.prototype.hide = function () {\n        this.ref.detach();\n    };\n    NbTooltipDirective.prototype.toggle = function () {\n        if (this.ref && this.ref.hasAttached()) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    };\n    NbTooltipDirective.prototype.createPositionStrategy = function () {\n        return this.positionBuilder\n            .connectedTo(this.hostRef)\n            .position(this.position)\n            .adjustment(this.adjustment)\n            .offset(8);\n    };\n    NbTooltipDirective.prototype.createTriggerStrategy = function () {\n        var _this = this;\n        return new NbTriggerStrategyBuilder()\n            .document(this.document)\n            .trigger(NbTrigger.HINT)\n            .host(this.hostRef.nativeElement)\n            .container(function () { return _this.container; })\n            .build();\n    };\n    NbTooltipDirective.prototype.subscribeOnPositionChange = function () {\n        var _this = this;\n        this.positionStrategy.positionChange\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (position) { return patch(_this.container, { position: position }); });\n    };\n    NbTooltipDirective.prototype.subscribeOnTriggers = function () {\n        var _this = this;\n        this.triggerStrategy.show$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.show(); });\n        this.triggerStrategy.hide$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.hide(); });\n    };\n    return NbTooltipDirective;\n}());\nexport { NbTooltipDirective };\n//# sourceMappingURL=tooltip.directive.js.map\n",null]}