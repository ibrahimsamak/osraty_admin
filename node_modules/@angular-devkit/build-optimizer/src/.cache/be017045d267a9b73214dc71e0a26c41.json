{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.options.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.options.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { InjectionToken } from '@angular/core';\nexport var NbWindowState;\n(function (NbWindowState) {\n    NbWindowState[\"MINIMIZED\"] = \"minimized\";\n    NbWindowState[\"MAXIMIZED\"] = \"maximized\";\n    NbWindowState[\"FULL_SCREEN\"] = \"full-screen\";\n})(NbWindowState || (NbWindowState = {}));\n/**\n * Window configuration options.\n */\nvar /**\n * Window configuration options.\n */\nNbWindowConfig = /** @class */ (function () {\n    function NbWindowConfig() {\n        var configs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            configs[_i] = arguments[_i];\n        }\n        /**\n           * Window title.\n           */\n        this.title = '';\n        /**\n           * Initial window state. Full screen by default.\n           */\n        this.initialState = NbWindowState.FULL_SCREEN;\n        /**\n           * If true than backdrop will be rendered behind window.\n           * By default set to true.\n           */\n        this.hasBackdrop = true;\n        /**\n           * If set to true mouse clicks on backdrop will close a window.\n           * Default is true.\n           */\n        this.closeOnBackdropClick = true;\n        /**\n           * If true then escape press will close a window.\n           * Default is true.\n           */\n        this.closeOnEsc = true;\n        /**\n           * Class to be applied to the window.\n           */\n        this.windowClass = '';\n        /**\n           * Both, template and component may receive data through `config.context` property.\n           * For components, this data will be set as component properties.\n           * For templates, you can access it inside template as $implicit.\n           */\n        this.context = {};\n        /**\n           * Where the attached component should live in Angular's *logical* component tree.\n           * This affects what is available for injection and the change detection order for the\n           * component instantiated inside of the window. This does not affect where the window\n           * content will be rendered.\n           */\n        this.viewContainerRef = null;\n        Object.assign.apply(Object, [this].concat(configs));\n    }\n    return NbWindowConfig;\n}());\n/**\n * Window configuration options.\n */\nexport { NbWindowConfig };\nexport var NB_WINDOW_CONTENT = new InjectionToken('Nebular Window Content');\nexport var NB_WINDOW_CONFIG = new InjectionToken('Nebular Window Config');\nexport var NB_WINDOW_CONTEXT = new InjectionToken('Nebular Window Context');\n//# sourceMappingURL=window.options.js.map",null]}