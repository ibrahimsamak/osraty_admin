{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.service.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.service.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { ComponentFactoryResolver, Inject, Injectable, Injector, TemplateRef, } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { NbComponentPortal, NbOverlayPositionBuilder, NbOverlayService, } from '../cdk/overlay';\nimport { NbBlockScrollStrategyAdapter } from '../cdk/adapter/block-scroll-strategy-adapter';\nimport { NB_WINDOW_CONFIG, NB_WINDOW_CONTENT, NB_WINDOW_CONTEXT, NbWindowConfig, NbWindowState, } from './window.options';\nimport { NbWindowRef } from './window-ref';\nimport { NbWindowsContainerComponent } from './windows-container.component';\nimport { NbWindowComponent } from './window.component';\n/**\n * The `NbWindowService` can be used to open windows.\n *\n * @stacked-example(Showcase, window/window-showcase.component)\n *\n * ### Installation\n *\n * Import `NbWindowModule` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbWindowModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbWindowModule.forChild(config),\n *   ],\n * })\n * export class LazyLoadedModule { }\n * ```\n *\n * ### Usage\n *\n * A new window can be opened by calling the `open` method with a component or template to be loaded\n * and an optional configuration.\n * `open` method will return `NbWindowRef` that can be used for the further manipulations.\n *\n * ```ts\n * const windowRef = this.windowService.open(MyComponent, { ... });\n * ```\n *\n * `NbWindowRef` gives you ability manipulate opened window.\n * Also, you can inject `NbWindowRef` inside provided component which rendered in window.\n *\n * ```ts\n * this.windowService.open(MyWindowComponent, { ... });\n *\n * // my.component.ts\n * constructor(protected windowRef: NbWindowRef) {\n * }\n *\n * minimize() {\n *   this.windowRef.minimize();\n * }\n *\n * close() {\n *   this.windowRef.close();\n * }\n * ```\n *\n * Instead of component you can create window from TemplateRef. As usual you can access context provided via config\n * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.\n *\n * @stacked-example(Window content from TemplateRef, window/template-window.component)\n *\n * ### Configuration\n *\n * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.\n * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.\n * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).\n *\n * @stacked-example(Configuration, window/windows-backdrop.component)\n */\nvar NbWindowService = /*@__PURE__*/ (function () {\n    function NbWindowService(componentFactoryResolver, overlayService, overlayPositionBuilder, blockScrollStrategy, defaultWindowsConfig, cfr) {\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.overlayService = overlayService;\n        this.overlayPositionBuilder = overlayPositionBuilder;\n        this.blockScrollStrategy = blockScrollStrategy;\n        this.defaultWindowsConfig = defaultWindowsConfig;\n        this.cfr = cfr;\n        this.openWindows = [];\n    }\n    /**\n     * Opens new window.\n     * @param windowContent\n     * @param windowConfig\n     * */\n    /**\n       * Opens new window.\n       * @param windowContent\n       * @param windowConfig\n       * */\n    NbWindowService.prototype.open = /**\n       * Opens new window.\n       * @param windowContent\n       * @param windowConfig\n       * */\n        function (windowContent, windowConfig) {\n            if (windowConfig === void 0) {\n                windowConfig = {};\n            }\n            if (this.windowsContainerViewRef == null) {\n                this.createWindowsContainer();\n            }\n            var config = new NbWindowConfig(this.defaultWindowsConfig, windowConfig);\n            var windowRef = new NbWindowRef(config);\n            windowRef.componentRef = this.appendWindow(windowContent, config, windowRef);\n            this.openWindows.push(windowRef);\n            this.subscribeToEvents(windowRef);\n            return windowRef;\n        };\n    NbWindowService.prototype.createWindowsContainer = function () {\n        this.overlayRef = this.overlayService.create({\n            scrollStrategy: this.overlayService.scrollStrategies.noop(),\n            positionStrategy: this.overlayPositionBuilder.global().bottom().right(),\n            hasBackdrop: true,\n        });\n        var windowsContainerPortal = new NbComponentPortal(NbWindowsContainerComponent, null, null, this.cfr);\n        var overlayRef = this.overlayRef.attach(windowsContainerPortal);\n        this.windowsContainerViewRef = overlayRef.instance.viewContainerRef;\n    };\n    NbWindowService.prototype.appendWindow = function (content, config, windowRef) {\n        var context = content instanceof TemplateRef\n            ? { $implicit: config.context, windowRef: windowRef }\n            : config.context;\n        var providers = [\n            { provide: NB_WINDOW_CONTENT, useValue: content },\n            { provide: NB_WINDOW_CONTEXT, useValue: context },\n            { provide: NbWindowConfig, useValue: config },\n            { provide: NbWindowRef, useValue: windowRef },\n        ];\n        var parentInjector = config.viewContainerRef\n            ? config.viewContainerRef.injector\n            : this.windowsContainerViewRef.injector;\n        var injector = Injector.create({ parent: parentInjector, providers: providers });\n        var windowFactory = this.componentFactoryResolver.resolveComponentFactory(NbWindowComponent);\n        var ref = this.windowsContainerViewRef.createComponent(windowFactory, null, injector);\n        ref.instance.cfr = this.cfr;\n        ref.changeDetectorRef.detectChanges();\n        return ref;\n    };\n    NbWindowService.prototype.subscribeToEvents = function (windowRef) {\n        var _this = this;\n        if (windowRef.config.closeOnBackdropClick) {\n            this.overlayRef.backdropClick().subscribe(function () { return windowRef.close(); });\n        }\n        if (windowRef.config.closeOnEsc) {\n            this.overlayRef.keydownEvents()\n                .pipe(filter(function (event) { return event.keyCode === 27; }))\n                .subscribe(function () { return windowRef.close(); });\n        }\n        windowRef.stateChange.subscribe(function () { return _this.checkAndUpdateOverlay(); });\n        windowRef.onClose.subscribe(function () {\n            _this.openWindows.splice(_this.openWindows.indexOf(windowRef), 1);\n            _this.checkAndUpdateOverlay();\n        });\n    };\n    NbWindowService.prototype.checkAndUpdateOverlay = function () {\n        var fullScreenWindows = this.openWindows.filter(function (w) { return w.state === NbWindowState.FULL_SCREEN; });\n        if (fullScreenWindows.length > 0) {\n            this.blockScrollStrategy.enable();\n        }\n        else {\n            this.blockScrollStrategy.disable();\n        }\n        if (fullScreenWindows.some(function (w) { return w.config.hasBackdrop; })) {\n            this.overlayRef.backdropElement.removeAttribute('hidden');\n        }\n        else {\n            this.overlayRef.backdropElement.setAttribute('hidden', '');\n        }\n    };\n    return NbWindowService;\n}());\nexport { NbWindowService };\n//# sourceMappingURL=window.service.js.map\n",null]}