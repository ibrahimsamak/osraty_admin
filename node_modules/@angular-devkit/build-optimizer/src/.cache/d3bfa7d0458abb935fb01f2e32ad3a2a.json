{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/stepper/stepper.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/stepper/stepper.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, ContentChildren, HostBinding, Input, } from '@angular/core';\nimport { NbStepComponent } from './step.component';\nexport var NbStepperOrientation;\n(function (NbStepperOrientation) {\n    NbStepperOrientation[\"VERTICAL\"] = \"vertical\";\n    NbStepperOrientation[\"HORIZONTAL\"] = \"horizontal\";\n})(NbStepperOrientation || (NbStepperOrientation = {}));\n/**\n * Stepper component\n *\n * @stacked-example(Showcase, stepper/stepper-showcase.component)\n *\n * ### Installation\n *\n * Import `NbStepperModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbStepperModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:\n * ```html\n * // ...\n * <nb-stepper orientation=\"horizontal\">\n *   <nb-step label=\"step number one\">\n *       // ... step content here\n *   <nb-step>\n *   <nb-step label=\"stepLabel\">\n *       <ng-template #stepLabel>\n *           <div>\n *               step number two\n *           </div>\n *       </ng-template>\n *       // ... step content here\n *   <nb-step>\n * </nb-stepper>\n * ```\n * Specify `[stepControl]=\"form\"` and user can navigates only if submit previous step's form.\n * ```html\n * // ...\n * <nb-stepper  orientation=\"horizontal\">\n *   <nb-step label=\"step number one\" [stepControl]=\"form\">\n *     <form [formGroup]=\"form\">\n *       // ...\n *     </form>\n *   <nb-step>\n *    // ...\n * </nb-stepper>\n * ```\n *\n * @stacked-example(Validation, stepper/stepper-validation.component)\n *\n * Stepper component has two layout options - `vertical` & `horizontal`\n * @stacked-example(Vertical, stepper/stepper-vertical.component)\n *\n * @styles\n *\n * stepper-index-size:\n * stepper-label-font-size:\n * stepper-label-font-weight:\n * stepper-accent-color:\n * stepper-completed-fg:\n * stepper-fg:\n * stepper-completed-icon-size:\n * stepper-completed-icon-weight:\n */\nvar NbStepperComponent = /*@__PURE__*/ (function () {\n    function NbStepperComponent() {\n        /**\n           * Stepper orientation - `horizontal`|`vertical`\n           * @type {string}\n           */\n        this.orientation = NbStepperOrientation.HORIZONTAL;\n        this.index = 0;\n    }\n    Object.defineProperty(NbStepperComponent.prototype, \"vertical\", {\n        get: function () {\n            return this.orientation === NbStepperOrientation.VERTICAL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbStepperComponent.prototype, \"horizontal\", {\n        get: function () {\n            return this.orientation === NbStepperOrientation.HORIZONTAL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbStepperComponent.prototype, \"selectedIndex\", {\n        get: /**\n           * Selected step index\n           *\n           * @type {boolean}\n           */ function () {\n            return this.index;\n        },\n        set: function (index) {\n            if (this.steps) {\n                if (this.index !== index && this.isStepValid(index)) {\n                    this.index = index;\n                }\n            }\n            else {\n                this.index = index;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbStepperComponent.prototype, \"selected\", {\n        get: /**\n           * Selected step component\n           *\n           * @type {boolean}\n           */ function () {\n            return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n        },\n        set: function (step) {\n            this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Navigate to next step\n     * */\n    /**\n       * Navigate to next step\n       * */\n    NbStepperComponent.prototype.next = /**\n       * Navigate to next step\n       * */\n        function () {\n            this.selectedIndex = Math.min(this.index + 1, this.steps.length - 1);\n        };\n    /**\n     * Navigate to previous step\n     * */\n    /**\n       * Navigate to previous step\n       * */\n    NbStepperComponent.prototype.previous = /**\n       * Navigate to previous step\n       * */\n        function () {\n            this.selectedIndex = Math.max(this.index - 1, 0);\n        };\n    /**\n     * Reset stepper and stepControls to initial state\n     * */\n    /**\n       * Reset stepper and stepControls to initial state\n       * */\n    NbStepperComponent.prototype.reset = /**\n       * Reset stepper and stepControls to initial state\n       * */\n        function () {\n            this.selectedIndex = 0;\n            this.steps.forEach(function (step) { return step.reset(); });\n        };\n    NbStepperComponent.prototype.isStepSelected = function (step) {\n        return this.index === this.steps.toArray().indexOf(step);\n    };\n    NbStepperComponent.prototype.isStepValid = function (index) {\n        var steps = this.steps.toArray();\n        steps[this.index].interacted = true;\n        if (index >= this.index && index > 0) {\n            var currentStep = steps[this.index];\n            return currentStep.completed;\n        }\n        return true;\n    };\n    return NbStepperComponent;\n}());\nexport { NbStepperComponent };\n//# sourceMappingURL=stepper.component.js.map\n",null]}