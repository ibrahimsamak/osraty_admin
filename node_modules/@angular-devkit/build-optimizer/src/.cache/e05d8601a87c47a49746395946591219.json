{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/spinner/spinner.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/spinner/spinner.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Directive, ElementRef, Input, Renderer2, ViewContainerRef, HostBinding, } from '@angular/core';\nimport { NbSpinnerComponent } from './spinner.component';\n/**\n * Styled spinner directive\n *\n * @stacked-example(Spinner Showcase, spinner/spinner-card.component)\n *\n *\n * ```ts\n * <nb-card [nbSpinner]=\"loading\" nbSpinnerStatus=\"danger\">\n *   <nb-card-body>Card Content</nb-card-body>\n * </nb-card>\n * ```\n *\n * ### Installation\n *\n * Import `NbSpinnerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbSpinnerModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Could be colored using `status` property\n *\n * @stacked-example(Spinner Colors, spinner/spinner-colors.component)\n *\n * Available in different sizes with `size` property:\n *\n * @stacked-example(Spinner Sizes, spinner/spinner-sizes.component)\n *\n * It is also possible to place it into the button:\n * @stacked-example(Buttons with spinner, spinner/spinner-button.component)\n *\n * Or tabs:\n * @stacked-example(Spinner in tabs, spinner/spinner-tabs.component)\n */\nvar NbSpinnerDirective = /*@__PURE__*/ (function () {\n    function NbSpinnerDirective(directiveView, componentFactoryResolver, renderer, directiveElement) {\n        this.directiveView = directiveView;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.renderer = renderer;\n        this.directiveElement = directiveElement;\n        this.isSpinnerExist = false;\n        this.shouldShow = false;\n    }\n    Object.defineProperty(NbSpinnerDirective.prototype, \"nbSpinner\", {\n        set: /**\n           * Directive value - show or hide spinner\n           * @param {boolean} val\n           */ function (val) {\n            if (this.componentFactory) {\n                if (val) {\n                    this.show();\n                }\n                else {\n                    this.hide();\n                }\n            }\n            else {\n                this.shouldShow = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbSpinnerDirective.prototype.ngOnInit = function () {\n        this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(NbSpinnerComponent);\n        if (this.shouldShow) {\n            this.show();\n        }\n    };\n    NbSpinnerDirective.prototype.hide = function () {\n        if (this.isSpinnerExist) {\n            this.directiveView.remove();\n            this.isSpinnerExist = false;\n        }\n    };\n    NbSpinnerDirective.prototype.show = function () {\n        if (!this.isSpinnerExist) {\n            this.spinner = this.directiveView.createComponent(this.componentFactory);\n            this.setInstanceInputs(this.spinner.instance);\n            this.spinner.changeDetectorRef.detectChanges();\n            this.renderer.appendChild(this.directiveElement.nativeElement, this.spinner.location.nativeElement);\n            this.isSpinnerExist = true;\n        }\n    };\n    NbSpinnerDirective.prototype.setInstanceInputs = function (instance) {\n        typeof this.spinnerMessage !== 'undefined' && (instance.message = this.spinnerMessage);\n        typeof this.spinnerStatus !== 'undefined' && (instance.status = this.spinnerStatus);\n        typeof this.spinnerSize !== 'undefined' && (instance.size = this.spinnerSize);\n    };\n    return NbSpinnerDirective;\n}());\nexport { NbSpinnerDirective };\n//# sourceMappingURL=spinner.directive.js.map\n",null]}