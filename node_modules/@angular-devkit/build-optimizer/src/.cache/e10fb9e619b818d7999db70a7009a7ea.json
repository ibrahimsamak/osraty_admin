{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token-storage.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token-storage.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { NbAuthTokenParceler } from './token-parceler';\nvar NbTokenStorage = /*@__PURE__*/ (function () {\n    function NbTokenStorage() {\n    }\n    return NbTokenStorage;\n}());\nexport { NbTokenStorage };\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\nvar NbTokenLocalStorage = /*@__PURE__*/ (function (_super) {\n    __extends(NbTokenLocalStorage, _super);\n    function NbTokenLocalStorage(parceler) {\n        var _this = _super.call(this) || this;\n        _this.parceler = parceler;\n        _this.key = 'auth_app_token';\n        return _this;\n    }\n    /**\n     * Returns token from localStorage\n     * @returns {NbAuthToken}\n     */\n    /**\n       * Returns token from localStorage\n       * @returns {NbAuthToken}\n       */\n    NbTokenLocalStorage.prototype.get = /**\n       * Returns token from localStorage\n       * @returns {NbAuthToken}\n       */\n        function () {\n            var raw = localStorage.getItem(this.key);\n            return this.parceler.unwrap(raw);\n        };\n    /**\n     * Sets token to localStorage\n     * @param {NbAuthToken} token\n     */\n    /**\n       * Sets token to localStorage\n       * @param {NbAuthToken} token\n       */\n    NbTokenLocalStorage.prototype.set = /**\n       * Sets token to localStorage\n       * @param {NbAuthToken} token\n       */\n        function (token) {\n            var raw = this.parceler.wrap(token);\n            localStorage.setItem(this.key, raw);\n        };\n    /**\n     * Clears token from localStorage\n     */\n    /**\n       * Clears token from localStorage\n       */\n    NbTokenLocalStorage.prototype.clear = /**\n       * Clears token from localStorage\n       */\n        function () {\n            localStorage.removeItem(this.key);\n        };\n    return NbTokenLocalStorage;\n}(NbTokenStorage));\nexport { NbTokenLocalStorage };\n//# sourceMappingURL=token-storage.js.map\n",null]}