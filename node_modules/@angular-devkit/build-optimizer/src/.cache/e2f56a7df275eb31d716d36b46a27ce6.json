{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/context-menu/context-menu.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/context-menu/context-menu.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Directive, ElementRef, Inject, Input, } from '@angular/core';\nimport { filter, takeWhile } from 'rxjs/operators';\nimport { createContainer, NbAdjustment, NbOverlayService, NbPosition, NbPositionBuilderService, NbTrigger, NbTriggerStrategyBuilder, patch, } from '../cdk';\nimport { NbContextMenuComponent } from './context-menu.component';\nimport { NbMenuService } from '../menu/menu.service';\nimport { NB_DOCUMENT } from '../../theme.options';\n/**\n * Full featured context menu directive.\n *\n * @stacked-example(Showcase, context-menu/context-menu-showcase.component)\n *\n * Just pass menu items array:\n *\n * ```html\n * <button [nbContextMenu]=\"items\"></button>\n * ...\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n * ### Installation\n *\n * Import `NbContextMenuModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbContextMenuModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If you want to handle context menu clicks you have to pass `nbContextMenuTag`\n * param and register to events using NbMenuService.\n * `NbContextMenu` renders plain `NbMenu` inside, so\n * you have to work with it just like with `NbMenu` component:\n *\n * @stacked-example(Menu item click, context-menu/context-menu-click.component)\n *\n * Context menu has different placements, such as: top, bottom, left and right\n * which can be used as following:\n *\n * ```html\n * <button [nbContextMenu]=\"items\" nbContextMenuPlacement=\"right\"></button>\n * ```\n *\n * ```ts\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n *\n * By default context menu will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the context menu.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```html\n * <button [nbContextMenu]=\"items\" nbContextMenuAdjustment=\"counterclockwise\"></button>\n * ```\n *\n * ```ts\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n * */\nvar NbContextMenuDirective = /*@__PURE__*/ (function () {\n    function NbContextMenuDirective(document, menuService, hostRef, positionBuilder, overlay, componentFactoryResolver) {\n        this.document = document;\n        this.menuService = menuService;\n        this.hostRef = hostRef;\n        this.positionBuilder = positionBuilder;\n        this.overlay = overlay;\n        this.componentFactoryResolver = componentFactoryResolver;\n        /**\n           * Position will be calculated relatively host element based on the position.\n           * Can be top, right, bottom and left.\n           * */\n        this.position = NbPosition.BOTTOM;\n        /**\n           * Container position will be changes automatically based on this strategy if container can't fit view port.\n           * Set this property to any falsy value if you want to disable automatically adjustment.\n           * Available values: clockwise, counterclockwise.\n           * */\n        this.adjustment = NbAdjustment.CLOCKWISE;\n        this.alive = true;\n        this.items = [];\n    }\n    Object.defineProperty(NbContextMenuDirective.prototype, \"setItems\", {\n        set: /**\n           * Basic menu items, will be passed to the internal NbMenuComponent.\n           * */ function (items) {\n            this.validateItems(items);\n            this.items = items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    NbContextMenuDirective.prototype.ngAfterViewInit = function () {\n        this.positionStrategy = this.createPositionStrategy();\n        this.ref = this.overlay.create({\n            positionStrategy: this.positionStrategy,\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\n        });\n        this.triggerStrategy = this.createTriggerStrategy();\n        this.subscribeOnTriggers();\n        this.subscribeOnPositionChange();\n        this.subscribeOnItemClick();\n    };\n    NbContextMenuDirective.prototype.ngOnDestroy = function () {\n        this.alive = false;\n        this.hide();\n    };\n    NbContextMenuDirective.prototype.show = function () {\n        this.container = createContainer(this.ref, NbContextMenuComponent, {\n            position: this.position,\n            items: this.items,\n            tag: this.tag,\n        }, this.componentFactoryResolver);\n    };\n    NbContextMenuDirective.prototype.hide = function () {\n        this.ref.detach();\n        this.container = null;\n    };\n    NbContextMenuDirective.prototype.toggle = function () {\n        if (this.ref && this.ref.hasAttached()) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    };\n    NbContextMenuDirective.prototype.createPositionStrategy = function () {\n        return this.positionBuilder\n            .connectedTo(this.hostRef)\n            .position(this.position)\n            .adjustment(this.adjustment);\n    };\n    NbContextMenuDirective.prototype.createTriggerStrategy = function () {\n        var _this = this;\n        return new NbTriggerStrategyBuilder()\n            .document(this.document)\n            .trigger(NbTrigger.CLICK)\n            .host(this.hostRef.nativeElement)\n            .container(function () { return _this.container; })\n            .build();\n    };\n    NbContextMenuDirective.prototype.subscribeOnPositionChange = function () {\n        var _this = this;\n        this.positionStrategy.positionChange\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (position) { return patch(_this.container, { position: position }); });\n    };\n    NbContextMenuDirective.prototype.subscribeOnTriggers = function () {\n        var _this = this;\n        this.triggerStrategy.show$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.show(); });\n        this.triggerStrategy.hide$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.hide(); });\n    };\n    /*\n     * NbMenuComponent will crash if don't pass menu items to it.\n     * So, we just validating them and throw custom obvious error.\n     * */\n    /*\n       * NbMenuComponent will crash if don't pass menu items to it.\n       * So, we just validating them and throw custom obvious error.\n       * */\n    NbContextMenuDirective.prototype.validateItems = /*\n       * NbMenuComponent will crash if don't pass menu items to it.\n       * So, we just validating them and throw custom obvious error.\n       * */\n        function (items) {\n            if (!items || !items.length) {\n                throw Error(\"List of menu items expected, but given: \" + items);\n            }\n        };\n    NbContextMenuDirective.prototype.subscribeOnItemClick = function () {\n        var _this = this;\n        this.menuService.onItemClick()\n            .pipe(takeWhile(function () { return _this.alive; }), filter(function (_a) {\n            var tag = _a.tag;\n            return tag === _this.tag;\n        }))\n            .subscribe(function () { return _this.hide(); });\n    };\n    return NbContextMenuDirective;\n}());\nexport { NbContextMenuDirective };\n//# sourceMappingURL=context-menu.directive.js.map\n",null]}