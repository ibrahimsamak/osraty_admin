{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/popover/popover.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/popover/popover.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Directive, ElementRef, Inject, Input, } from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport { NbAdjustment, NbOverlayService, NbPosition, NbPositionBuilderService, NbTrigger, NbTriggerStrategyBuilder, patch, createContainer, } from '../cdk';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NbPopoverComponent } from './popover.component';\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * @stacked-example(Showcase, popover/popover-showcase.component)\n *\n * Popover can accept different content such as:\n * TemplateRef\n *\n * ```html\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n * ### Installation\n *\n * Import `NbPopoverModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbPopoverModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Custom components\n *\n * ```html\n * <button [nbPopover]=\"MyPopoverComponent\"></button>\n * ```\n *\n * Both custom components and templateRef popovers can receive *contentContext* property\n * that will be passed to the content props.\n *\n * Primitive types\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * Popover has different placements, such as: top, bottom, left, right, start and end\n * which can be used as following:\n *\n * @stacked-example(Placements, popover/popover-placements.component)\n *\n * By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the popover container.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\" [nbPopoverAdjust]=\"false\"></button>\n * ```\n *\n * Also popover has some different modes which provides capability show$ and hide$ popover in different ways:\n *\n * - Click mode popover shows when a user clicking on the host element and hides when the user clicks\n * somewhere on the document except popover.\n * - Hint mode provides capability show$ popover when the user hovers on the host element\n * and hide$ popover when user hovers out of the host.\n * - Hover mode works like hint mode with one exception - when the user moves mouse from host element to\n * the container element popover will not be hidden.\n *\n * @stacked-example(Available Modes, popover/popover-modes.component.html)\n *\n * @additional-example(Template Ref, popover/popover-template-ref.component)\n * @additional-example(Custom Component, popover/popover-custom-component.component)\n * */\nvar NbPopoverDirective = /*@__PURE__*/ (function () {\n    function NbPopoverDirective(document, hostRef, positionBuilder, overlay, componentFactoryResolver) {\n        this.document = document;\n        this.hostRef = hostRef;\n        this.positionBuilder = positionBuilder;\n        this.overlay = overlay;\n        this.componentFactoryResolver = componentFactoryResolver;\n        /**\n           * Container content context. Will be applied to the rendered component.\n           * */\n        this.context = {};\n        /**\n           * Position will be calculated relatively host element based on the position.\n           * Can be top, right, bottom, left, start or end.\n           * */\n        this.position = NbPosition.TOP;\n        /**\n           * Container position will be changes automatically based on this strategy if container can't fit view port.\n           * Set this property to any falsy value if you want to disable automatically adjustment.\n           * Available values: clockwise, counterclockwise.\n           * */\n        this.adjustment = NbAdjustment.CLOCKWISE;\n        /**\n           * Describes when the container will be shown.\n           * Available options: click, hover and hint\n           * */\n        this.mode = NbTrigger.CLICK;\n        this.alive = true;\n    }\n    NbPopoverDirective.prototype.ngAfterViewInit = function () {\n        this.positionStrategy = this.createPositionStrategy();\n        this.ref = this.overlay.create({\n            positionStrategy: this.positionStrategy,\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\n        });\n        this.triggerStrategy = this.createTriggerStrategy();\n        this.subscribeOnTriggers();\n        this.subscribeOnPositionChange();\n    };\n    NbPopoverDirective.prototype.ngOnDestroy = function () {\n        this.alive = false;\n        this.hide();\n    };\n    NbPopoverDirective.prototype.show = function () {\n        this.container = createContainer(this.ref, NbPopoverComponent, {\n            position: this.position,\n            content: this.content,\n            context: this.context,\n            cfr: this.componentFactoryResolver,\n        }, this.componentFactoryResolver);\n    };\n    NbPopoverDirective.prototype.hide = function () {\n        this.ref.detach();\n        this.container = null;\n    };\n    NbPopoverDirective.prototype.toggle = function () {\n        if (this.ref && this.ref.hasAttached()) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    };\n    NbPopoverDirective.prototype.createPositionStrategy = function () {\n        return this.positionBuilder\n            .connectedTo(this.hostRef)\n            .position(this.position)\n            .adjustment(this.adjustment);\n    };\n    NbPopoverDirective.prototype.createTriggerStrategy = function () {\n        var _this = this;\n        return new NbTriggerStrategyBuilder()\n            .document(this.document)\n            .trigger(this.mode)\n            .host(this.hostRef.nativeElement)\n            .container(function () { return _this.container; })\n            .build();\n    };\n    NbPopoverDirective.prototype.subscribeOnPositionChange = function () {\n        var _this = this;\n        this.positionStrategy.positionChange\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (position) { return patch(_this.container, { position: position }); });\n    };\n    NbPopoverDirective.prototype.subscribeOnTriggers = function () {\n        var _this = this;\n        this.triggerStrategy.show$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.show(); });\n        this.triggerStrategy.hide$.pipe(takeWhile(function () { return _this.alive; })).subscribe(function () { return _this.hide(); });\n    };\n    return NbPopoverDirective;\n}());\nexport { NbPopoverDirective };\n//# sourceMappingURL=popover.directive.js.map\n",null]}