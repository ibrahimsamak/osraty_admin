{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/datepicker/datepicker.directive.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/datepicker/datepicker.directive.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Directive, ElementRef, forwardRef, Inject, InjectionToken, Input } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { map, takeWhile } from 'rxjs/operators';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NbDateService } from '../calendar-kit';\n/**\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\n * different date types.\n * */\nvar /**\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\n * different date types.\n * */ NbDatepickerAdapter = /*@__PURE__*/ (function () {\n    function NbDatepickerAdapter() {\n    }\n    return NbDatepickerAdapter;\n}());\n/**\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\n * different date types.\n * */\nexport { NbDatepickerAdapter };\n/**\n * Datepicker is an control that can pick any values anyway.\n * It has to be bound to the datepicker directive through nbDatepicker input.\n * */\nvar /**\n * Datepicker is an control that can pick any values anyway.\n * It has to be bound to the datepicker directive through nbDatepicker input.\n * */ NbDatepicker = /*@__PURE__*/ (function () {\n    function NbDatepicker() {\n    }\n    return NbDatepicker;\n}());\n/**\n * Datepicker is an control that can pick any values anyway.\n * It has to be bound to the datepicker directive through nbDatepicker input.\n * */\nexport { NbDatepicker };\nexport var NB_DATE_ADAPTER = new InjectionToken('Datepicker Adapter');\n/**\n * The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker\n * is shown when input receives a `focus` event.\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker></nb-datepicker>\n * ```\n *\n * @stacked-example(Showcase, datepicker/datepicker-showcase.component)\n *\n * ### Installation\n *\n * Import `NbDatepickerModule.forRoot()` to your root module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDatepickerModule.forRoot(),\n *   ],\n * })\n * export class AppModule { }\n * ```\n * And `NbDatepickerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDatepickerModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If you want to use range selection, you have to use `NbRangepickerComponent` instead:\n *\n * ```html\n * <input [nbDatepicker]=\"rangepicker\">\n * <nb-rangepicker #rangepicker></nb-rangepicker>\n * ```\n *\n * Both range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional\n * info.\n *\n * @stacked-example(Range showcase, datepicker/rangepicker-showcase.component)\n *\n * Datepicker is the form control so it can be bound with angular forms through ngModel and form controls.\n *\n * @stacked-example(Forms, datepicker/datepicker-forms.component)\n *\n * `NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.\n * And `filter` predicate that receives date object and has to return a boolean value.\n *\n * @stacked-example(Validation, datepicker/datepicker-validation.component)\n *\n * The `NbDatepickerComponent` supports date formatting:\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker format=\"MM\\dd\\yyyy\"></nb-datepicker>\n * ```\n *\n * ## Formatting Issue\n *\n * By default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.\n * And native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.\n * To provide custom formatting you have to use one of the following packages:\n *\n * - `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than\n * will operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and\n * import `NbMomentDateModule` from this package.\n *\n * - `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.\n * Because date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to\n * install it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package.\n *\n * @styles\n *\n * datepicker-fg\n * datepicker-bg\n * datepicker-border\n * datepicker-border-radius\n * datepicker-shadow\n * datepicker-arrow-size\n * */\nvar NbDatepickerDirective = /*@__PURE__*/ (function () {\n    function NbDatepickerDirective(document, datepickerAdapters, hostRef, dateService) {\n        var _this = this;\n        this.document = document;\n        this.datepickerAdapters = datepickerAdapters;\n        this.hostRef = hostRef;\n        this.dateService = dateService;\n        this.alive = true;\n        this.onChange = function () {\n        };\n        /**\n           * Form control validators will be called in validators context, so, we need to bind them.\n           * */\n        this.validator = Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator,\n        ].map(function (fn) { return fn.bind(_this); }));\n        this.subscribeOnInputChange();\n    }\n    Object.defineProperty(NbDatepickerDirective.prototype, \"setPicker\", {\n        set: /**\n           * Provides datepicker component.\n           * */ function (picker) {\n            this.picker = picker;\n            this.setupPicker();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbDatepickerDirective.prototype, \"input\", {\n        /**\n         * Returns html input element.\n         * */\n        get: /**\n           * Returns html input element.\n           * */ function () {\n            return this.hostRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbDatepickerDirective.prototype, \"inputValue\", {\n        /**\n         * Returns host input value.\n         * */\n        get: /**\n           * Returns host input value.\n           * */ function () {\n            return this.input.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbDatepickerDirective.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    /**\n     * Writes value in picker and html input element.\n     * */\n    /**\n       * Writes value in picker and html input element.\n       * */\n    NbDatepickerDirective.prototype.writeValue = /**\n       * Writes value in picker and html input element.\n       * */\n        function (value) {\n            this.writePicker(value);\n            this.writeInput(value);\n        };\n    NbDatepickerDirective.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    NbDatepickerDirective.prototype.registerOnTouched = function (fn) {\n    };\n    NbDatepickerDirective.prototype.setDisabledState = function (isDisabled) {\n    };\n    /**\n     * Form control validation based on picker validator config.\n     * */\n    /**\n       * Form control validation based on picker validator config.\n       * */\n    NbDatepickerDirective.prototype.validate = /**\n       * Form control validation based on picker validator config.\n       * */\n        function () {\n            return this.validator(null);\n        };\n    /**\n     * Hides picker, focuses the input\n     */\n    /**\n       * Hides picker, focuses the input\n       */\n    NbDatepickerDirective.prototype.hidePicker = /**\n       * Hides picker, focuses the input\n       */\n        function () {\n            this.input.focus();\n            this.picker.hide();\n        };\n    /**\n     * Validates that we can parse value correctly.\n     * */\n    /**\n       * Validates that we can parse value correctly.\n       * */\n    NbDatepickerDirective.prototype.parseValidator = /**\n       * Validates that we can parse value correctly.\n       * */\n        function () {\n            var isValid = this.datepickerAdapter.isValid(this.inputValue, this.picker.format);\n            return isValid ? null : { nbDatepickerParse: { value: this.inputValue } };\n        };\n    /**\n     * Validates passed value is greater than min.\n     * */\n    /**\n       * Validates passed value is greater than min.\n       * */\n    NbDatepickerDirective.prototype.minValidator = /**\n       * Validates passed value is greater than min.\n       * */\n        function () {\n            var config = this.picker.getValidatorConfig();\n            var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n            return (!config.min || !date || this.dateService.compareDates(config.min, date) <= 0) ?\n                null : { nbDatepickerMin: { min: config.min, actual: date } };\n        };\n    /**\n     * Validates passed value is smaller than max.\n     * */\n    /**\n       * Validates passed value is smaller than max.\n       * */\n    NbDatepickerDirective.prototype.maxValidator = /**\n       * Validates passed value is smaller than max.\n       * */\n        function () {\n            var config = this.picker.getValidatorConfig();\n            var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n            return (!config.max || !date || this.dateService.compareDates(config.max, date) >= 0) ?\n                null : { nbDatepickerMax: { max: config.max, actual: date } };\n        };\n    /**\n     * Validates passed value satisfy the filter.\n     * */\n    /**\n       * Validates passed value satisfy the filter.\n       * */\n    NbDatepickerDirective.prototype.filterValidator = /**\n       * Validates passed value satisfy the filter.\n       * */\n        function () {\n            var config = this.picker.getValidatorConfig();\n            var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n            return (!config.filter || !date || config.filter(date)) ?\n                null : { nbDatepickerFilter: true };\n        };\n    /**\n     * Chooses datepicker adapter based on passed picker component.\n     * */\n    /**\n       * Chooses datepicker adapter based on passed picker component.\n       * */\n    NbDatepickerDirective.prototype.chooseDatepickerAdapter = /**\n       * Chooses datepicker adapter based on passed picker component.\n       * */\n        function () {\n            var _this = this;\n            this.datepickerAdapter = this.datepickerAdapters.find(function (_a) {\n                var picker = _a.picker;\n                return _this.picker instanceof picker;\n            });\n            if (this.noDatepickerAdapterProvided()) {\n                throw new Error('No datepickerAdapter provided for picker');\n            }\n        };\n    /**\n     * Attaches picker to the host input element and subscribes on value changes.\n     * */\n    /**\n       * Attaches picker to the host input element and subscribes on value changes.\n       * */\n    NbDatepickerDirective.prototype.setupPicker = /**\n       * Attaches picker to the host input element and subscribes on value changes.\n       * */\n        function () {\n            var _this = this;\n            this.chooseDatepickerAdapter();\n            this.picker.attach(this.hostRef);\n            if (this.hostRef.nativeElement.value) {\n                this.picker.value = this.datepickerAdapter.parse(this.hostRef.nativeElement.value, this.picker.format);\n            }\n            this.picker.valueChange\n                .pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function (value) {\n                _this.writePicker(value);\n                _this.writeInput(value);\n                _this.onChange(value);\n                if (_this.picker.shouldHide()) {\n                    _this.hidePicker();\n                }\n            });\n        };\n    NbDatepickerDirective.prototype.writePicker = function (value) {\n        this.picker.value = value;\n    };\n    NbDatepickerDirective.prototype.writeInput = function (value) {\n        var stringRepresentation = this.datepickerAdapter.format(value, this.picker.format);\n        this.hostRef.nativeElement.value = stringRepresentation;\n    };\n    /**\n     * Validates if no datepicker adapter provided.\n     * */\n    /**\n       * Validates if no datepicker adapter provided.\n       * */\n    NbDatepickerDirective.prototype.noDatepickerAdapterProvided = /**\n       * Validates if no datepicker adapter provided.\n       * */\n        function () {\n            return !this.datepickerAdapter || !(this.datepickerAdapter instanceof NbDatepickerAdapter);\n        };\n    NbDatepickerDirective.prototype.subscribeOnInputChange = function () {\n        var _this = this;\n        fromEvent(this.input, 'input')\n            .pipe(map(function () { return _this.inputValue; }), takeWhile(function () { return _this.alive; }))\n            .subscribe(function (value) { return _this.handleInputChange(value); });\n    };\n    /**\n     * Parses input value and write if it isn't null.\n     * */\n    /**\n       * Parses input value and write if it isn't null.\n       * */\n    NbDatepickerDirective.prototype.handleInputChange = /**\n       * Parses input value and write if it isn't null.\n       * */\n        function (value) {\n            var date = this.parseInputValue(value);\n            this.onChange(date);\n            this.writePicker(date);\n        };\n    NbDatepickerDirective.prototype.parseInputValue = function (value) {\n        if (this.datepickerAdapter.isValid(value, this.picker.format)) {\n            return this.datepickerAdapter.parse(value, this.picker.format);\n        }\n        return null;\n    };\n    return NbDatepickerDirective;\n}());\nexport { NbDatepickerDirective };\n//# sourceMappingURL=datepicker.directive.js.map\n",null]}