{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.component.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/theme/components/window/window.component.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Component, ElementRef, HostBinding, Inject, TemplateRef, Renderer2, ViewChild, Input, } from '@angular/core';\nimport { NbComponentPortal, NbFocusTrapFactoryService, NbOverlayContainerComponent, NbTemplatePortal, } from '../cdk';\nimport { NB_WINDOW_CONTENT, NbWindowConfig, NbWindowState, NB_WINDOW_CONTEXT } from './window.options';\nimport { NbWindowRef } from './window-ref';\nvar NbWindowComponent = /*@__PURE__*/ (function () {\n    function NbWindowComponent(content, context, windowRef, config, focusTrapFactory, elementRef, renderer) {\n        this.content = content;\n        this.context = context;\n        this.windowRef = windowRef;\n        this.config = config;\n        this.focusTrapFactory = focusTrapFactory;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(NbWindowComponent.prototype, \"isFullScreen\", {\n        get: function () {\n            return this.windowRef.state === NbWindowState.FULL_SCREEN;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbWindowComponent.prototype, \"maximized\", {\n        get: function () {\n            return this.windowRef.state === NbWindowState.MAXIMIZED;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbWindowComponent.prototype, \"minimized\", {\n        get: function () {\n            return this.windowRef.state === NbWindowState.MINIMIZED;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbWindowComponent.prototype.ngOnInit = function () {\n        this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);\n        this.focusTrap.blurPreviouslyFocusedElement();\n        this.focusTrap.focusInitialElement();\n        if (this.config.windowClass) {\n            this.renderer.addClass(this.elementRef.nativeElement, this.config.windowClass);\n        }\n    };\n    NbWindowComponent.prototype.ngAfterViewInit = function () {\n        if (this.content instanceof TemplateRef) {\n            this.attachTemplate();\n        }\n        else {\n            this.attachComponent();\n        }\n    };\n    NbWindowComponent.prototype.ngOnDestroy = function () {\n        if (this.focusTrap) {\n            this.focusTrap.restoreFocus();\n        }\n        this.close();\n    };\n    NbWindowComponent.prototype.minimize = function () {\n        if (this.windowRef.state === NbWindowState.MINIMIZED) {\n            this.windowRef.toPreviousState();\n        }\n        else {\n            this.windowRef.minimize();\n        }\n    };\n    NbWindowComponent.prototype.maximize = function () {\n        this.windowRef.maximize();\n    };\n    NbWindowComponent.prototype.fullScreen = function () {\n        this.windowRef.fullScreen();\n    };\n    NbWindowComponent.prototype.maximizeOrFullScreen = function () {\n        if (this.windowRef.state === NbWindowState.MINIMIZED) {\n            this.maximize();\n        }\n        else {\n            this.fullScreen();\n        }\n    };\n    NbWindowComponent.prototype.close = function () {\n        this.windowRef.close();\n    };\n    NbWindowComponent.prototype.attachTemplate = function () {\n        this.overlayContainer.attachTemplatePortal(new NbTemplatePortal(this.content, null, {\n            $implicit: this.context,\n        }));\n    };\n    NbWindowComponent.prototype.attachComponent = function () {\n        var portal = new NbComponentPortal(this.content, null, null, this.cfr);\n        var ref = this.overlayContainer.attachComponentPortal(portal);\n        Object.assign(ref.instance, this.context);\n        ref.changeDetectorRef.detectChanges();\n    };\n    return NbWindowComponent;\n}());\nexport { NbWindowComponent };\n//# sourceMappingURL=window.component.js.map\n",null]}