{"remainingRequest":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token.js","dependencies":[{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@nebular/auth/services/token/token.js","mtime":499162500000},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/cache-loader/dist/cjs.js","mtime":1541238936889},{"path":"/Users/ibrahimm.samak/Desktop/liken/CPanel-API/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { urlBase64Decode } from '../../helpers';\nvar NbAuthToken = /*@__PURE__*/ (function () {\n    function NbAuthToken() {\n        this.payload = null;\n    }\n    NbAuthToken.prototype.getName = function () {\n        return this.constructor.NAME;\n    };\n    NbAuthToken.prototype.getPayload = function () {\n        return this.payload;\n    };\n    return NbAuthToken;\n}());\nexport { NbAuthToken };\nvar NbAuthTokenNotFoundError = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthTokenNotFoundError, _super);\n    function NbAuthTokenNotFoundError(message) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return NbAuthTokenNotFoundError;\n}(Error));\nexport { NbAuthTokenNotFoundError };\nvar NbAuthIllegalTokenError = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthIllegalTokenError, _super);\n    function NbAuthIllegalTokenError(message) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return NbAuthIllegalTokenError;\n}(Error));\nexport { NbAuthIllegalTokenError };\nvar NbAuthEmptyTokenError = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthEmptyTokenError, _super);\n    function NbAuthEmptyTokenError(message) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return NbAuthEmptyTokenError;\n}(NbAuthIllegalTokenError));\nexport { NbAuthEmptyTokenError };\nvar NbAuthIllegalJWTTokenError = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthIllegalJWTTokenError, _super);\n    function NbAuthIllegalJWTTokenError(message) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return NbAuthIllegalJWTTokenError;\n}(NbAuthIllegalTokenError));\nexport { NbAuthIllegalJWTTokenError };\nexport function nbAuthCreateToken(tokenClass, token, ownerStrategyName, createdAt) {\n    return new tokenClass(token, ownerStrategyName, createdAt);\n}\nexport function decodeJwtPayload(payload) {\n    if (payload.length === 0) {\n        throw new NbAuthEmptyTokenError('Cannot extract from an empty payload.');\n    }\n    var parts = payload.split('.');\n    if (parts.length !== 3) {\n        throw new NbAuthIllegalJWTTokenError(\"The payload \" + payload + \" is not valid JWT payload and must consist of three parts.\");\n    }\n    var decoded;\n    try {\n        decoded = urlBase64Decode(parts[1]);\n    }\n    catch (e) {\n        throw new NbAuthIllegalJWTTokenError(\"The payload \" + payload + \" is not valid JWT payload and cannot be parsed.\");\n    }\n    if (!decoded) {\n        throw new NbAuthIllegalJWTTokenError(\"The payload \" + payload + \" is not valid JWT payload and cannot be decoded.\");\n    }\n    return JSON.parse(decoded);\n}\n/**\n * Wrapper for simple (text) token\n */\nvar NbAuthSimpleToken = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthSimpleToken, _super);\n    function NbAuthSimpleToken(token, ownerStrategyName, createdAt) {\n        var _this = _super.call(this) || this;\n        _this.token = token;\n        _this.ownerStrategyName = ownerStrategyName;\n        _this.createdAt = createdAt;\n        try {\n            _this.parsePayload();\n        }\n        catch (err) {\n            if (!(err instanceof NbAuthTokenNotFoundError)) {\n                // token is present but has got a problem, including illegal\n                throw err;\n            }\n        }\n        _this.createdAt = _this.prepareCreatedAt(createdAt);\n        return _this;\n    }\n    NbAuthSimpleToken.prototype.parsePayload = function () {\n        this.payload = null;\n    };\n    NbAuthSimpleToken.prototype.prepareCreatedAt = function (date) {\n        return date ? date : new Date();\n    };\n    /**\n     * Returns the token's creation date\n     * @returns {Date}\n     */\n    /**\n       * Returns the token's creation date\n       * @returns {Date}\n       */\n    NbAuthSimpleToken.prototype.getCreatedAt = /**\n       * Returns the token's creation date\n       * @returns {Date}\n       */\n        function () {\n            return this.createdAt;\n        };\n    /**\n     * Returns the token value\n     * @returns string\n     */\n    /**\n       * Returns the token value\n       * @returns string\n       */\n    NbAuthSimpleToken.prototype.getValue = /**\n       * Returns the token value\n       * @returns string\n       */\n        function () {\n            return this.token;\n        };\n    NbAuthSimpleToken.prototype.getOwnerStrategyName = function () {\n        return this.ownerStrategyName;\n    };\n    /**\n     * Is non empty and valid\n     * @returns {boolean}\n     */\n    /**\n       * Is non empty and valid\n       * @returns {boolean}\n       */\n    NbAuthSimpleToken.prototype.isValid = /**\n       * Is non empty and valid\n       * @returns {boolean}\n       */\n        function () {\n            return !!this.getValue();\n        };\n    /**\n     * Validate value and convert to string, if value is not valid return empty string\n     * @returns {string}\n     */\n    /**\n       * Validate value and convert to string, if value is not valid return empty string\n       * @returns {string}\n       */\n    NbAuthSimpleToken.prototype.toString = /**\n       * Validate value and convert to string, if value is not valid return empty string\n       * @returns {string}\n       */\n        function () {\n            return !!this.token ? this.token : '';\n        };\n    NbAuthSimpleToken.NAME = 'nb:auth:simple:token';\n    return NbAuthSimpleToken;\n}(NbAuthToken));\nexport { NbAuthSimpleToken };\n/**\n * Wrapper for JWT token with additional methods.\n */\nvar NbAuthJWTToken = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthJWTToken, _super);\n    function NbAuthJWTToken() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n     */\n    /**\n       * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n       */\n    NbAuthJWTToken.prototype.prepareCreatedAt = /**\n       * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n       */\n        function (date) {\n            var decoded = this.getPayload();\n            return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : _super.prototype.prepareCreatedAt.call(this, date);\n        };\n    /**\n     * Returns payload object\n     * @returns any\n     */\n    /**\n       * Returns payload object\n       * @returns any\n       */\n    NbAuthJWTToken.prototype.parsePayload = /**\n       * Returns payload object\n       * @returns any\n       */\n        function () {\n            if (!this.token) {\n                throw new NbAuthTokenNotFoundError('Token not found. ');\n            }\n            this.payload = decodeJwtPayload(this.token);\n        };\n    /**\n     * Returns expiration date\n     * @returns Date\n     */\n    /**\n       * Returns expiration date\n       * @returns Date\n       */\n    NbAuthJWTToken.prototype.getTokenExpDate = /**\n       * Returns expiration date\n       * @returns Date\n       */\n        function () {\n            var decoded = this.getPayload();\n            if (decoded && !decoded.hasOwnProperty('exp')) {\n                return null;\n            }\n            var date = new Date(0);\n            date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\n            return date;\n        };\n    /**\n     * Is data expired\n     * @returns {boolean}\n     */\n    /**\n       * Is data expired\n       * @returns {boolean}\n       */\n    NbAuthJWTToken.prototype.isValid = /**\n       * Is data expired\n       * @returns {boolean}\n       */\n        function () {\n            return _super.prototype.isValid.call(this) && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n        };\n    NbAuthJWTToken.NAME = 'nb:auth:jwt:token';\n    return NbAuthJWTToken;\n}(NbAuthSimpleToken));\nexport { NbAuthJWTToken };\nvar prepareOAuth2Token = function (data) {\n    if (typeof data === 'string') {\n        try {\n            return JSON.parse(data);\n        }\n        catch (e) { }\n    }\n    return data;\n};\nvar Éµ0 = prepareOAuth2Token;\n/**\n * Wrapper for OAuth2 token whose access_token is a JWT Token\n */\nvar NbAuthOAuth2Token = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthOAuth2Token, _super);\n    function NbAuthOAuth2Token(data, ownerStrategyName, createdAt) {\n        if (data === void 0) {\n            data = {};\n        }\n        // we may get it as string when retrieving from a storage\n        return _super.call(this, prepareOAuth2Token(data), ownerStrategyName, createdAt) || this;\n    }\n    /**\n     * Returns the token value\n     * @returns string\n     */\n    /**\n       * Returns the token value\n       * @returns string\n       */\n    NbAuthOAuth2Token.prototype.getValue = /**\n       * Returns the token value\n       * @returns string\n       */\n        function () {\n            return this.token.access_token;\n        };\n    /**\n     * Returns the refresh token\n     * @returns string\n     */\n    /**\n       * Returns the refresh token\n       * @returns string\n       */\n    NbAuthOAuth2Token.prototype.getRefreshToken = /**\n       * Returns the refresh token\n       * @returns string\n       */\n        function () {\n            return this.token.refresh_token;\n        };\n    /**\n     *  put refreshToken in the token payload\n      * @param refreshToken\n     */\n    /**\n       *  put refreshToken in the token payload\n        * @param refreshToken\n       */\n    NbAuthOAuth2Token.prototype.setRefreshToken = /**\n       *  put refreshToken in the token payload\n        * @param refreshToken\n       */\n        function (refreshToken) {\n            this.token.refresh_token = refreshToken;\n        };\n    /**\n     * Parses token payload\n     * @returns any\n     */\n    /**\n       * Parses token payload\n       * @returns any\n       */\n    NbAuthOAuth2Token.prototype.parsePayload = /**\n       * Parses token payload\n       * @returns any\n       */\n        function () {\n            if (!this.token) {\n                throw new NbAuthTokenNotFoundError('Token not found.');\n            }\n            else {\n                if (!Object.keys(this.token).length) {\n                    throw new NbAuthEmptyTokenError('Cannot extract payload from an empty token.');\n                }\n            }\n            this.payload = this.token;\n        };\n    /**\n     * Returns the token type\n     * @returns string\n     */\n    /**\n       * Returns the token type\n       * @returns string\n       */\n    NbAuthOAuth2Token.prototype.getType = /**\n       * Returns the token type\n       * @returns string\n       */\n        function () {\n            return this.token.token_type;\n        };\n    /**\n     * Is data expired\n     * @returns {boolean}\n     */\n    /**\n       * Is data expired\n       * @returns {boolean}\n       */\n    NbAuthOAuth2Token.prototype.isValid = /**\n       * Is data expired\n       * @returns {boolean}\n       */\n        function () {\n            return _super.prototype.isValid.call(this) && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n        };\n    /**\n     * Returns expiration date\n     * @returns Date\n     */\n    /**\n       * Returns expiration date\n       * @returns Date\n       */\n    NbAuthOAuth2Token.prototype.getTokenExpDate = /**\n       * Returns expiration date\n       * @returns Date\n       */\n        function () {\n            if (!this.token.hasOwnProperty('expires_in')) {\n                return null;\n            }\n            return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\n        };\n    /**\n     * Convert to string\n     * @returns {string}\n     */\n    /**\n       * Convert to string\n       * @returns {string}\n       */\n    NbAuthOAuth2Token.prototype.toString = /**\n       * Convert to string\n       * @returns {string}\n       */\n        function () {\n            return JSON.stringify(this.token);\n        };\n    NbAuthOAuth2Token.NAME = 'nb:auth:oauth2:token';\n    return NbAuthOAuth2Token;\n}(NbAuthSimpleToken));\nexport { NbAuthOAuth2Token };\n/**\n * Wrapper for OAuth2 token embedding JWT tokens\n */\nvar NbAuthOAuth2JWTToken = /*@__PURE__*/ (function (_super) {\n    __extends(NbAuthOAuth2JWTToken, _super);\n    function NbAuthOAuth2JWTToken() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NbAuthOAuth2JWTToken.prototype.parsePayload = function () {\n        _super.prototype.parsePayload.call(this);\n        this.parseAccessTokenPayload();\n    };\n    NbAuthOAuth2JWTToken.prototype.parseAccessTokenPayload = function () {\n        var accessToken = this.getValue();\n        if (!accessToken) {\n            throw new NbAuthTokenNotFoundError('access_token key not found.');\n        }\n        this.accessTokenPayload = decodeJwtPayload(accessToken);\n    };\n    /**\n     * Returns access token payload\n     * @returns any\n     */\n    /**\n       * Returns access token payload\n       * @returns any\n       */\n    NbAuthOAuth2JWTToken.prototype.getAccessTokenPayload = /**\n       * Returns access token payload\n       * @returns any\n       */\n        function () {\n            return this.accessTokenPayload;\n        };\n    /**\n     * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n     */\n    /**\n       * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n       */\n    NbAuthOAuth2JWTToken.prototype.prepareCreatedAt = /**\n       * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n       */\n        function (date) {\n            var payload = this.accessTokenPayload;\n            return payload && payload.iat ? new Date(Number(payload.iat) * 1000) : _super.prototype.prepareCreatedAt.call(this, date);\n        };\n    /**\n     * Is token valid\n     * @returns {boolean}\n     */\n    /**\n       * Is token valid\n       * @returns {boolean}\n       */\n    NbAuthOAuth2JWTToken.prototype.isValid = /**\n       * Is token valid\n       * @returns {boolean}\n       */\n        function () {\n            return this.accessTokenPayload && _super.prototype.isValid.call(this);\n        };\n    /**\n     * Returns expiration date :\n     * - exp if set,\n     * - super.getExpDate() otherwise\n     * @returns Date\n     */\n    /**\n       * Returns expiration date :\n       * - exp if set,\n       * - super.getExpDate() otherwise\n       * @returns Date\n       */\n    NbAuthOAuth2JWTToken.prototype.getTokenExpDate = /**\n       * Returns expiration date :\n       * - exp if set,\n       * - super.getExpDate() otherwise\n       * @returns Date\n       */\n        function () {\n            if (this.accessTokenPayload && this.accessTokenPayload.hasOwnProperty('exp')) {\n                var date = new Date(0);\n                date.setUTCSeconds(this.accessTokenPayload.exp);\n                return date;\n            }\n            else {\n                return _super.prototype.getTokenExpDate.call(this);\n            }\n        };\n    NbAuthOAuth2JWTToken.NAME = 'nb:auth:oauth2:jwt:token';\n    return NbAuthOAuth2JWTToken;\n}(NbAuthOAuth2Token));\nexport { NbAuthOAuth2JWTToken };\nexport { Éµ0 };\n//# sourceMappingURL=token.js.map\n",null]}